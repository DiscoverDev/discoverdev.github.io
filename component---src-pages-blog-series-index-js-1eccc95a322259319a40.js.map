{"version":3,"sources":["webpack:///./src/pages/blog/series/index.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es7.object.entries.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_object-to-array.js"],"names":["__webpack_exports__","_ref","data","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_6__","Object","entries","js30","jsFoo","map","_ref2","series","name","nodes","edges","edge","node","_components_post_grid_post_grid__WEBPACK_IMPORTED_MODULE_8__","posts","className","styles","seeMore","gatsby__WEBPACK_IMPORTED_MODULE_5__","to","seriesIndexFragment","js30Fragment","jsFooFragment","categoryListQuery","$export","__webpack_require__","$entries","S","it","getKeys","toIObject","isEnum","f","module","exports","isEntries","key","O","keys","length","i","result","call","push"],"mappings":"oXAiBeA,EAAA,iBAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAKhB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAEEE,OAAOC,QATK,CAClBC,KAAS,QACTC,MAAU,WAO0BC,IAAI,SAAAC,GAAkB,IAAhBC,EAAgBD,EAAA,GAARE,EAAQF,EAAA,GAC9CG,EAAQb,EAAKW,GAAQG,MAAML,IAAK,SAAAM,GAAI,OAAIA,EAAKC,OACjD,OACAf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUC,MAAOL,IACjBZ,EAAAC,EAAAC,cAAA,MAAIgB,UAAWC,IAAOC,SACpBpB,EAAAC,EAAAC,cAACmB,EAAA,KAAD,CAAMC,GAAE,gBAAkBZ,GAA1B,wCAYT,IAAMa,EAAmB,aAqBnBC,EAAY,aAcZC,EAAa,aAcbC,EAAiB,iCC9F9B,IAAAC,EAAcC,EAAQ,GACtBC,EAAeD,EAAQ,IAARA,EAA4B,GAE3CD,IAAAG,EAAA,UACAzB,QAAA,SAAA0B,GACA,OAAAF,EAAAE,2BCNA,IAAAC,EAAcJ,EAAQ,IACtBK,EAAgBL,EAAQ,IACxBM,EAAaN,EAAQ,IAAeO,EACpCC,EAAAC,QAAA,SAAAC,GACA,gBAAAP,GAOA,IANA,IAKAQ,EALAC,EAAAP,EAAAF,GACAU,EAAAT,EAAAQ,GACAE,EAAAD,EAAAC,OACAC,EAAA,EACAC,EAAA,GAEAF,EAAAC,GAAAT,EAAAW,KAAAL,EAAAD,EAAAE,EAAAE,OACAC,EAAAE,KAAAR,EAAA,CAAAC,EAAAC,EAAAD,IAAAC,EAAAD,IACK,OAAAK","file":"component---src-pages-blog-series-index-js-1eccc95a322259319a40.js","sourcesContent":["/*\nmaybe make this an index.md\nAdd the necessary stuff in the frontmatter\n  like which series would you like to feature and stuff.\nand then have a function in gatsby-node.js which will read the markdown and\ndo the query. Result is then passed to the template as pageContext\n*/\n\n// or never mind, just call it out manually(?)\n//  but for this I have to change the jsx & graphql every time I add a series.\n\nimport React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../../../components/layout\"\nimport styles from \"../index.module.css\"\nimport PostGrid from \"../../../components/post-grid/post-grid\"\n\nexport default ({ data }) => {\n  let seriesNameMap = {\n    \"js30\" : \"JS 30\",\n    \"jsFoo\" : \"JS FOO\"\n  }\n  return (\n    <Layout>\n      <div>\n        <h1>Series</h1>\n        {\n          Object.entries(seriesNameMap).map(([series, name])=>{\n            let nodes = data[series].edges.map( edge => edge.node )\n            return (\n            <div>\n              <h2>{name}</h2>\n              <PostGrid posts={nodes}/>\n              <h3 className={styles.seeMore}>\n                <Link to={`/blog/series/${series}`}>See all posts in the series &rarr;</Link>\n              </h3>\n            </div>\n            )\n          })\n        }\n      </div>\n    </Layout>\n  )\n}\n\n// this will remain more or less constant.\nexport const seriesIndexFragment = graphql`\n  fragment seriesIndex on MarkdownRemarkConnection {\n    edges{\n      node{\n        id\n        fields{\n          slug\n        }\n        frontmatter {\n          title\n          date(formatString: \"DD MMMM, YYYY\")\n        }\n        excerpt\n      }\n    }\n  }\n`\n\n// this is specific to each series mainly because\n//  of \"name aliasing\" and \"fileAbsolutePath\"\n// just change that from query to query\nexport const js30Fragment = graphql`\n  fragment js30 on Query {\n    js30: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: {regex: \"/src/pages/blog/series/js30//\"}\n        frontmatter:{published: {eq : true}, type: {ne: \"page\"}}\n      }\n      sort: { fields: [frontmatter___date], order: DESC }, limit: 4\n      ){\n        ...seriesIndex\n      }\n  }\n`\n\nexport const jsFooFragment = graphql`\n  fragment jsFoo on Query {\n    jsFoo: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: {regex: \"/src/pages/blog/series/jsFoo//\"}\n        frontmatter:{published: {eq : true}, type: {ne: \"page\"}}\n      }\n      sort: { fields: [frontmatter___date], order: DESC }, limit: 4\n      ){\n        ...seriesIndex\n      }\n  }\n`\n\nexport const categoryListQuery = graphql`\nquery {\n  ...js30\n  ...jsFoo\n}\n`","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","var getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n"],"sourceRoot":""}