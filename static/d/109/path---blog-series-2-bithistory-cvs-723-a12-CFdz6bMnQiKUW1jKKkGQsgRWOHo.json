{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Github was launched in 2008. If your software engineering career, like mine, is\nno older than Github, then Git may be the only version control software you\nhave ever used. While people sometimes grouse about its steep learning curve or\nunintuitive interface, Git has become everyone's go-to for version control. In\nStack Overflow's 2015 developer survey, 69.3% of respondents used Git, almost\ntwice as many as used the second-most-popular version control system,\nSubversion."},{"type":"element","tagName":"sup","properties":{"id":"fnref-1"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-1","className":["footnote-ref"]},"children":[{"type":"text","value":"1"}]}]},{"type":"text","value":" After 2015, Stack Overflow stopped asking developers about the\nversion control systems they use, perhaps because Git had become so popular\nthat the question was uninteresting."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Git itself is not much older than Github. Linus Torvalds released the first\nversion of Git in 2005. Though today younger developers might have a hard time\nconceiving of a world where the term \"version control software\" didn't more or\nless just mean Git, such a world existed not so long ago. There were lots of\nalternatives to choose from. Open source developers preferred Subversion,\nenterprises and video game companies used Perforce (some still do), while the\nLinux kernel project famously relied on a version control system called\nBitKeeper."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some of these systems, particularly BitKeeper, might feel familiar to a young\nGit user transported back in time. Most would not. BitKeeper aside, the version\ncontrol systems that came before Git worked according to a fundamentally\ndifferent paradigm. In a taxonomy offered by Eric Sink, author of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Version\nControl by Example"}]},{"type":"text","value":", Git is a third-generation version control system, while\nmost of Git's predecessors, the systems popular in the 1990s and early 2000s,\nare second-generation version control systems."},{"type":"element","tagName":"sup","properties":{"id":"fnref-2"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-2","className":["footnote-ref"]},"children":[{"type":"text","value":"2"}]}]},{"type":"text","value":" Where third-generation\nversion control systems are distributed, second-generation version control\nsystems are centralized. You have almost certainly heard Git described as a\n\"distributed\" version control system before. I never quite understood the\ndistributed/centralized distinction, at least not until I installed and\nexperimented with a centralized second-generation version control system\nmyself."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The system I installed was CVS. CVS, short for Concurrent Versions System, was\nthe very first second-generation version control system. It was also the most\npopular version control system for about a decade until it was replaced in 2000\nby Subversion. Even then, Subversion was supposed to be \"CVS but better,\" which\nonly underscores how dominant CVS had become throughout the 1990s."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CVS was first developed in 1986 by a Dutch computer scientist named Dick Grune,\nwho was looking for a way to collaborate with his students on a compiler\nproject."},{"type":"element","tagName":"sup","properties":{"id":"fnref-3"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-3","className":["footnote-ref"]},"children":[{"type":"text","value":"3"}]}]},{"type":"text","value":" CVS was initially little more than a collection of shell scripts\nwrapping RCS (Revision Control System), a first-generation version control\nsystem that Grune wanted to improve. RCS works according to a pessimistic\nlocking model, meaning that no two programmers can work on a single file at\nonce. In order to edit a file, you have to first ask RCS for an exclusive lock\non the file, which you keep until you are finished editing. If someone else is\nalready editing a file you need to edit, you have to wait. CVS improved on RCS\nand ushered in the second generation of version control systems by trading the\npessimistic locking model for an optimistic one. Programmers could now edit the\nsame file at the same time, merging their edits and resolving any conflicts\nlater. (Brian Berliner, an engineer who later took over the CVS project, wrote\na very readable "},{"type":"element","tagName":"a","properties":{"href":"https://docs.freebsd.org/44doc/psd/28.cvs/paper.pdf"},"children":[{"type":"text","value":"paper"}]},{"type":"text","value":"\nabout CVS' innovations in 1990.)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In that sense, CVS wasn't all that different from Git, which also works\naccording to an optimistic model. But that's where the similarities end. In\nfact, when Linus Torvalds was developing Git, one of his guiding principles was\nWWCVSND, or \"What Would CVS Not Do.\" Whenever he was in doubt about a decision,\nhe strove to choose the option that had not been chosen in the design of\nCVS."},{"type":"element","tagName":"sup","properties":{"id":"fnref-4"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-4","className":["footnote-ref"]},"children":[{"type":"text","value":"4"}]}]},{"type":"text","value":" So even though CVS predates Git by over a decade, it influenced Git as\na kind of negative template."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I've really enjoyed playing around with CVS. I think there's no better way to\nunderstand why Git's distributed nature is such an improvement on what came\nbefore. So I invite you to come along with me on an exciting journey and\nspend the next ten minutes of your life learning about a piece of software\nnobody has used in the last decade. ("},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"See "},{"type":"element","tagName":"a","properties":{"href":"#correction"},"children":[{"type":"text","value":"correction"}]},{"type":"text","value":"."}]},{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Getting Started with CVS"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Instructions for installing CVS can be found on the "},{"type":"element","tagName":"a","properties":{"href":"https://www.nongnu.org/cvs/"},"children":[{"type":"text","value":"project's\nhomepage"}]},{"type":"text","value":". On MacOS, you can install CVS using\nHomebrew."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since CVS is centralized, it distinguishes between the client-side universe and\nthe server-side universe in a way that something like Git does not. The\ndistinction is not so pronounced that there are different executables. But in\norder to start using CVS, even on your own machine, you'll have to set up the\nCVS backend."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CVS backend, the central store for all your code, is called the repository.\nWhereas in Git you would typically have a repository for every project, in CVS\nthe repository holds all of your projects. There is one central repository for\neverything, though there are ways to work with only a project at a time."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To create a local repository, you run the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"init"}]},{"type":"text","value":" command. You would do this\nsomewhere global like your home directory."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs -d ~/sandbox init"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CVS allows you to pass options to either the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs"}]},{"type":"text","value":" command itself or to the\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"init"}]},{"type":"text","value":" subcommand. Options that appear after the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs"}]},{"type":"text","value":" command are global in\nnature, while options that appear after the subcommand are specific to the\nsubcommand. In this case, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" flag is global. Here it happens to tell CVS\nwhere we want to create our repository, but in general the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" flag points to\nthe location of the repository we want to use for any given action. It can be\ntedious to supply the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" flag all the time, so the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"CVSROOT"}]},{"type":"text","value":" environment\nvariable can be set instead."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since we're working locally, we've just passed a path for our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" argument,\nbut we could also have included a hostname."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The command creates a directory called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sandbox"}]},{"type":"text","value":" in your home directory. If you\nlist the contents of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sandbox"}]},{"type":"text","value":", you'll find that it contains another directory\ncalled "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"CVSROOT"}]},{"type":"text","value":". This directory, not to be confused with the environment\nvariable, holds administrative files for the repository."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Congratulations! You've just created your first CVS repository."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Checking In Code"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's say that you've decided to keep a list of your favorite colors. You are\nan artistically inclined but extremely forgetful person. You type up your list\nof colors and save it as a file called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"favorites.txt"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"blue\norange\ngreen\n\ndefinitely not yellow"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's also assume that you've saved your file in a new directory called\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"colors"}]},{"type":"text","value":". Now you'd like to put your favorite color list under version control,\nbecause fifty years from now it will be interesting to look back and see how\nyour tastes changed through time."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to do that, you will have to import your directory as a new CVS\nproject. You can do that using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"import"}]},{"type":"text","value":" command:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs -d ~/sandbox import -m \"\" colors colors initial\nN colors/favorites.txt\n\nNo conflicts created by this import"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here we are specifying the location of our repository with the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" flag\nagain. The remaining arguments are passed to the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"import"}]},{"type":"text","value":" subcommand. We have\nto provide a message, but here we don't really need one, so we've left it\nblank. The next argument, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"colors"}]},{"type":"text","value":", specifies the name of our new directory in\nthe repository; here we've just used the same name as the directory we are in.\nThe last two arguments specify the vendor tag and the release tag respectively.\nWe'll talk more about tags in a minute."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You've just pulled your \"colors\" project into the CVS repository. There are a\ncouple different ways to go about bringing code into CVS, but this is the\nmethod recommended by "},{"type":"element","tagName":"a","properties":{"href":"http://shop.oreilly.com/product/9780974514000.do"},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Pragmatic Version Control Using\nCVS"}]}]},{"type":"text","value":", the Pragmatic\nProgrammer book about CVS. What makes this method a little awkward is that you\nthen have to check out your work fresh, even though you've already got an\nexisting "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"colors"}]},{"type":"text","value":" directory. Instead of using that directory, you're going to\ndelete it and then check out the version that CVS already knows about:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs -d ~/sandbox co colors\ncvs checkout: Updating colors\nU colors/favorites.txt"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This will create a new directory, also called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"colors"}]},{"type":"text","value":". In this directory you\nwill find your original "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"favorites.txt"}]},{"type":"text","value":" file along with a directory called\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"CVS"}]},{"type":"text","value":". The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"CVS"}]},{"type":"text","value":" directory is basically CVS' equivalent of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":".git"}]},{"type":"text","value":" directory\nin every Git repository."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Making Changes"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Get ready for a trip."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just like Git, CVS has a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"status"}]},{"type":"text","value":" subcommand:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs status\ncvs status: Examining .\n===================================================================\nFile: favorites.txt    \tStatus: Up-to-date\n\n   Working revision:\t1.1.1.1\t2018-07-06 19:27:54 -0400\n   Repository revision:\t1.1.1.1\t/Users/sinclairtarget/sandbox/colors/favorites.txt,v\n   Commit Identifier:\tfD7GYxt035GNg8JA\n   Sticky Tag:\t\t(none)\n   Sticky Date:\t\t(none)\n   Sticky Options:\t(none)"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is where things start to look alien. CVS doesn't have commit objects. In\nthe above, there is something called a \"Commit Identifier,\" but this might be\nonly a relatively recent edition—no mention of a \"Commit Identifier\" appears in\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Pragmatic Version Control Using CVS"}]},{"type":"text","value":", which was published in 2003. (The last\nupdate to CVS was released in 2008."},{"type":"element","tagName":"sup","properties":{"id":"fnref-5"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-5","className":["footnote-ref"]},"children":[{"type":"text","value":"5"}]}]},{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whereas with Git you'd talk about the version of a file associated with commit\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"45de392"}]},{"type":"text","value":", in CVS files are versioned separately. The first version of your\nfile is version 1.1, the next version is 1.2, and so on. When branches are\ninvolved, extra numbers are appended, so you might end up with something like\nthe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"1.1.1.1"}]},{"type":"text","value":" above, which appears to be the default in our case even though we\nhaven't created any branches."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you were to run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs log"}]},{"type":"text","value":" (equivalent to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"git log"}]},{"type":"text","value":") in a project with lots\nof files and commits, you'd see an individual history for each file. You might\nhave a file at version 1.2 and a file at version 1.14 in the same project."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's go ahead and make a change to version 1.1 of our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"favorites.txt"}]},{"type":"text","value":" file:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":" blue\n orange\n green\n+cyan\n\n definitely not yellow"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Once we've made the change, we can run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs diff"}]},{"type":"text","value":" to see what CVS thinks we've\ndone:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs diff\ncvs diff: Diffing .\nIndex: favorites.txt\n===================================================================\nRCS file: /Users/sinclairtarget/sandbox/colors/favorites.txt,v\nretrieving revision 1.1.1.1\ndiff -r1.1.1.1 favorites.txt\n3a4\n> cyan"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CVS recognizes that we added a new line containing the color \"cyan\" to the\nfile. (Actually, it says we've made changes to the \"RCS\" file; you can see that\nCVS never fully escaped its original association with RCS.) The diff we are\nbeing shown is the diff between the copy of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"favorites.txt"}]},{"type":"text","value":" in our working\ndirectory and the 1.1.1.1 version stored in the repository."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to update the version stored in the repository, we have to commit the\nchange. In Git, this would be a multi-step process. We'd have to stage the\nchange so that it appears in our index. Then we'd commit the change. Finally,\nto make the change visible to anyone else, we'd have to push the commit up to\nthe origin repository."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In CVS, "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"all"}]},{"type":"text","value":" of these things happen when you run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs commit"}]},{"type":"text","value":". CVS just\nbundles up all the changes it can find and puts them in the repository:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs commit -m \"Add cyan to favorites.\"\ncvs commit: Examining .\n/Users/sinclairtarget/sandbox/colors/favorites.txt,v  <--  favorites.txt\nnew revision: 1.2; previous revision: 1.1"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I'm so used to Git that this strikes me as terrifying. Without an opportunity\nto stage changes, any old thing that you've touched in your working directory\nmight end up as part of the public repository. Did you passive-aggressively\nrewrite a coworker's poorly implemented function out of cathartic necessity,\nnever intending for him to know? Too bad, he now thinks you're a dick. You also\ncan't edit your commits before pushing them, since a commit "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"is"}]},{"type":"text","value":" a push. Do you\nenjoy spending 40 minutes repeatedly running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"git rebase -i"}]},{"type":"text","value":" until your local\ncommit history flows like the derivation of a mathematical proof? Sorry, you\ncan't do that here, and everyone is going to find out that you don't actually\nwrite your tests first."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But I also now understand why so many people find Git needlessly complicated.\nIf "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs commit"}]},{"type":"text","value":" is what you were used to, then I'm sure staging and pushing\nchanges would strike you as a pointless chore."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When people talk about Git being a \"distributed\" system, this is primarily the\ndifference they mean. In CVS, you can't make commits locally. A commit is a\nsubmission of code to the central repository, so it's not something you can do\nwithout a connection. All you've got locally is your working directory. In Git,\nyou have a full-fledged local repository, so you can make commits all day long\neven while disconnected. And you can edit those commits, revert, branch, and\ncherry pick as much as you want, without anybody else having to know."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since commits were a bigger deal, CVS users often made them infrequently.\nCommits would contain as many changes as today we might expect to see in a\nten-commit pull request. This was especially true if commits triggered a CI\nbuild and an automated test suite."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we now run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs status"}]},{"type":"text","value":", we can see that we have a new version of our file:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs status\ncvs status: Examining .\n===================================================================\nFile: favorites.txt    \tStatus: Up-to-date\n\n   Working revision:\t1.2\t2018-07-06 21:18:59 -0400\n   Repository revision:\t1.2\t/Users/sinclairtarget/sandbox/colors/favorites.txt,v\n   Commit Identifier:\tpQx5ooyNk90wW8JA\n   Sticky Tag:\t\t(none)\n   Sticky Date:\t\t(none)\n   Sticky Options:\t(none)"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Merging"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As mentioned above, in CVS you can edit a file that someone else is already\nediting. That was CVS' big improvement on RCS. What happens when you need to\nbring your changes back together?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's say that you have invited some friends to add their favorite colors to\nyour list. While they are adding their colors, you decide that you no longer\nlike the color green and remove it from the list."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When you go to commit your changes, you might discover that CVS notices a\nproblem:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs commit -m \"Remove green\"\ncvs commit: Examining .\ncvs commit: Up-to-date check failed for `favorites.txt'\ncvs [commit aborted]: correct above errors first!"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It looks like your friends committed their changes first. So your version of\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"favorites.txt"}]},{"type":"text","value":" is not up-to-date with the version in the repository. If you\nrun "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs status"}]},{"type":"text","value":", you'll see that your local copy of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"favorites.txt"}]},{"type":"text","value":" is version\n1.2 with some local changes, but the repository version is 1.3:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs status\ncvs status: Examining .\n===================================================================\nFile: favorites.txt    \tStatus: Needs Merge\n\n   Working revision:\t1.2\t2018-07-07 10:42:43 -0400\n   Repository revision:\t1.3\t/Users/sinclairtarget/sandbox/colors/favorites.txt,v\n   Commit Identifier:\t2oZ6n0G13bDaldJA\n   Sticky Tag:\t\t(none)\n   Sticky Date:\t\t(none)\n   Sticky Options:\t(none)"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs diff"}]},{"type":"text","value":" to see exactly what the differences between 1.2 and\n1.3 are:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs diff -r HEAD favorites.txt\nIndex: favorites.txt\n===================================================================\nRCS file: /Users/sinclairtarget/sandbox/colors/favorites.txt,v\nretrieving revision 1.3\ndiff -r1.3 favorites.txt\n3d2\n< green\n7,10d5\n<\n< pink\n< hot pink\n< bubblegum pink"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It seems that our friends really like pink. In any case, they've edited a\ndifferent part of the file than we have, so the changes are easy to merge. CVS\ncan do that for us when we run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs update"}]},{"type":"text","value":", which is similar to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"git pull"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs update\ncvs update: Updating .\nRCS file: /Users/sinclairtarget/sandbox/colors/favorites.txt,v\nretrieving revision 1.2\nretrieving revision 1.3\nMerging differences between 1.2 and 1.3 into favorites.txt\nM favorites.txt"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you now take a look at "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"favorites.txt"}]},{"type":"text","value":", you'll find that it has been\nmodified to include the changes that your friends made to the file. Your\nchanges are still there too. Now you are free to commit the file:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs commit\ncvs commit: Examining .\n/Users/sinclairtarget/sandbox/colors/favorites.txt,v  <--  favorites.txt\nnew revision: 1.4; previous revision: 1.3"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The end result is what you'd get in Git by running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"git pull --rebase"}]},{"type":"text","value":". Your\nchanges have been added on top of your friends' changes. There is no \"merge\ncommit.\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes, changes to the same file might be incompatible. If your friends had\nchanged \"green\" to \"olive,\" for example, that would have conflicted with your\nchange removing \"green\" altogether. In the early days of CVS, this was exactly\nthe kind of case that caused people to worry that CVS wasn't safe; RCS'\npessimistic locking ensured that such a case could never arise. But CVS\nguarantees safety by making sure that nobody's changes get overwritten\nautomatically. You have to tell CVS which change you want to keep going\nforward, so when you run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs update"}]},{"type":"text","value":", CVS marks up the file with both changes\nin the same way that Git does when Git detects a merge conflict. You then have\nto manually edit the file and pick the change you want to keep."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The interesting thing to note here is that merge conflicts have to be fixed\nbefore you can commit. This is another consequence of CVS' centralized nature.\nIn Git, you don't have to worry about resolving merges until you push the\ncommits you've got locally."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Tags and Branches"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since CVS doesn't have easily addressable commit objects, the only way to group\na collection of changes is to mark a particular working directory state with a\ntag."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Creating a tag is easy:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs tag VERSION_1_0\ncvs tag: Tagging .\nT favorites.txt"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You'll later be able to return files to this state by running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs update"}]},{"type":"text","value":" and\npassing the tag to the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-r"}]},{"type":"text","value":" flag:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs update -r VERSION_1_0\ncvs update: Updating .\nU favorites.txt"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because you need a tag to rewind to an earlier working directory state, CVS\nencourages a lot of preemptive tagging. Before major refactors, for example,\nyou might create a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BEFORE_REFACTOR_01"}]},{"type":"text","value":" tag that you could later use if the\nrefactor went wrong. People also used tags if they wanted to generate\nproject-wide diffs. Basically, all the things we routinely do today with commit\nhashes have to be anticipated and planned for with CVS, since you needed to\nhave the tags available already."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Branches can be created in CVS, sort of. Branches are just a special kind of\ntag:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs rtag -b TRY_EXPERIMENTAL_THING colors\ncvs rtag: Tagging colors"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"That only creates the branch (in full view of everyone, by the way), so you\nstill need to switch to it using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs update"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs update -r TRY_EXPERIMENTAL_THING"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The above commands switch onto the new branch in your current working\ndirectory, but "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Pragmatic Version Control Using CVS"}]},{"type":"text","value":" actually advises that you\ncreate a new directory to hold your new branch. Presumably its authors found\nswitching directories easier than switching branches in CVS."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Pragmatic Version Control Using CVS"}]},{"type":"text","value":" also advises against creating branches\noff of an existing branch. They recommend only creating branches off of the\nmainline branch, which in Git is known as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"master"}]},{"type":"text","value":". In general, branching was\nconsidered an \"advanced\" CVS skill. In Git, you might start a new branch for\nalmost any trivial reason, but in CVS branching was typically used only when\nreally necessary, such as for releases."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A branch could later be merged back into the mainline using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cvs update"}]},{"type":"text","value":" and\nthe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-j"}]},{"type":"text","value":" flag:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ cvs update -j TRY_EXPERIMENTAL_THING"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Thanks for the Commit Histories"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 2007, Linus Torvalds gave "},{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=4XpnKHJAok8"},"children":[{"type":"text","value":"a\ntalk"}]},{"type":"text","value":" about Git at Google. Git was\nvery new then, so the talk was basically an attempt to persuade a roomful of\nskeptical programmers that they should use Git, even though Git was so\ndifferent from anything then available. If you haven't already seen the talk, I\nhighly encourage you to watch it. Linus is an entertaining speaker, even if he\nnever fails to be his brash self. He does an excellent job of explaining why\nthe distributed model of version control is better than the centralized one. A\nlot of his criticism is reserved for CVS in particular."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Git is a "},{"type":"element","tagName":"a","properties":{"href":"https://xkcd.com/1597/"},"children":[{"type":"text","value":"complex tool"}]},{"type":"text","value":". Learning it can be a\nfrustrating experience. But I'm also continually amazed at the things that Git\ncan do. In comparison, CVS is simple and straightforward, though often unable\nto do many of the operations we now take for granted. Going back and using CVS\nfor a while is an excellent way to find yourself with a new appreciation for\nGit's power and flexibility. It illustrates well why understanding the history\nof software development can be so beneficial—picking up and re-examining\nobsolete tools will teach you volumes about the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"why"}]},{"type":"text","value":" behind the tools we use\ntoday."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Correction"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I've been told that there are many organizations, particularly risk-adverse\norganizations that do things like make medical device software, that still use\nCVS. Programmers in these organizations have developed little tricks for\nworking around CVS' limitations, such as making a new branch for almost every\nchange to avoid committing directly to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HEAD"}]},{"type":"text","value":". (Thanks to Michael Kohne for\npointing this out.)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{"style":"color:#5f5f5f;font-size:16px;font-style: italic;padding-top:2em;text-align:center"},"children":[{"type":"text","value":"\noriginally posted at "},{"type":"element","tagName":"a","properties":{"href":"https://twobithistory.org"},"children":[{"type":"text","value":"two bit history"}]},{"type":"text","value":" under \n"},{"type":"element","tagName":"a","properties":{"href":"https://creativecommons.org/licenses/by-sa/4.0/"},"children":[{"type":"text","value":"CC BY-SA 4.0"}]},{"type":"text","value":" by "},{"type":"element","tagName":"a","properties":{"href":"http://sinclairtarget.com"},"children":[{"type":"text","value":"Sinclair Target"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["footnotes"]},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-1"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\"2015 Developer Survey,\" Stack Overflow, accessed July 7, 2018, "},{"type":"element","tagName":"a","properties":{"href":"https://insights.stackoverflow.com/survey/2015#tech-sourcecontrol"},"children":[{"type":"text","value":"https://insights.stackoverflow.com/survey/2015#tech-sourcecontrol"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-1","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-2"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Eric Sink, \"A History of Version Control,\" Version Control By Example, 2011, accessed July 7, 2018, "},{"type":"element","tagName":"a","properties":{"href":"https://ericsink.com/vcbe/html/history_of_version_control.html"},"children":[{"type":"text","value":"https://ericsink.com/vcbe/html/history_of_version_control.html"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-2","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-3"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dick Grune, \"Concurrent Versions System CVS,\" dickgrune.com, accessed July 7, 2018, "},{"type":"element","tagName":"a","properties":{"href":"https://dickgrune.com/Programs/CVS.orig/#History"},"children":[{"type":"text","value":"https://dickgrune.com/Programs/CVS.orig/#History"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-3","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-4"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\"Tech Talk: Linus Torvalds on Git,\" YouTube, May 14, 2007, accessed July 7, 2018, "},{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=4XpnKHJAok8"},"children":[{"type":"text","value":"https://www.youtube.com/watch?v=4XpnKHJAok8"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-4","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-5"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\"Concurrent Versions System - News,\" Savannah, accessed July 7, 2018, "},{"type":"element","tagName":"a","properties":{"href":"http://savannah.nongnu.org/news/?group=cvs"},"children":[{"type":"text","value":"http://savannah.nongnu.org/news/?group=cvs"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-5","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"title":"Version Control Before Git with CVS","author":{"name":"Sinclair Target"},"date":"07 July 2018"}}},"pageContext":{"slug":"/blog/series/2bithistory/cvs/"}}