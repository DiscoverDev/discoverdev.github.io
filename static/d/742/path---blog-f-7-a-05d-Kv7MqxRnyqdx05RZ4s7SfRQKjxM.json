{"data":{"allPosts":{"totalCount":51,"edges":[{"node":{"id":"ff65ddec-fd16-5bd0-b37a-b1de9a50c00f","fields":{"slug":"/blog/posts/test-post/"},"frontmatter":{"title":"WP history","date":"03 December, 2018","desc":"The history of wordpress\n","categories":["fullstack","software-architecture","history"]},"excerpt":"2. The Only Blogger In Corsica It was late 2000, and Michel Valdrighi ( michelv ) was writing a blog post in his small apartment above a bar…"}},{"node":{"id":"0464f247-23dc-5dcd-abf6-cc833ddd1ffe","fields":{"slug":"/blog/posts/inner-self/"},"frontmatter":{"title":"InnerSelf","date":"25 November, 2018","desc":"This is a source code walkthrough of InnerSelf - a tiny view + state management solution using innerHTML and ES6 template literals. InnerSelf to mimic a React+Redux solution in a minimal way, at just 600 bytes minified, ~350 bytes when gzipped.\n","categories":["frontend","software-architecture","javascript"]},"excerpt":"InnerSelf is a tiny view + state management solution using innerHTML. Aims to mimic a React+Redux solution in a minimal way, at just 60…"}},{"node":{"id":"b38ef751-f232-523e-80e5-33a12f861253","fields":{"slug":"/blog/posts/bubbly-bg/"},"frontmatter":{"title":"Bubbly-bg","date":"24 November, 2018","desc":"This is a source code walkthrough of Bubbly-bg - a tiny dependency free library to get beautiful animated bubbly backgrounds for your webpages.\n","categories":["frontend","software-architecture","javascript"]},"excerpt":"This is a source code walkthrough of Bubbly-bg - a tiny js library to get beautiful animated bubbly backgrounds for your webpages. Bubbly-bg…"}},{"node":{"id":"101b7075-702b-5a26-9a71-c06cb08f0c68","fields":{"slug":"/blog/series/2bithistory/cat/"},"frontmatter":{"title":"The Source History of Cat","date":"12 November, 2018","desc":"A tour of the many historical implementations of the Unix cat utility. Ken Thompson and Dennis Ritchie began writing Unix on a PDP 7. This was in 1969, before C, so all of the early Unix software was written in PDP 7 assembly. The first implementation of cat is thus in PDP 7 assembly. See how cat evolved from the 1960s PDP implementation to how it is today.\n","categories":null},"excerpt":"I once had a debate with members of my extended family about whether a computer\nscience degree is a degree worth pursuing. I was in college…"}},{"node":{"id":"b31740a7-1bc3-5483-bae7-ce9497f1bfdb","fields":{"slug":"/blog/series/2bithistory/lisp/"},"frontmatter":{"title":"How Lisp Became God's Own Programming Language","date":"14 October, 2018","desc":"A look at the fascinating history behind the one programming language with magical powers. \"John McCarthy, Lisp's creator, did not originally intend for Lisp to be an elegant distillation of the principles of computation. But, after one or two fortunate insights and a series of refinements, that's what Lisp became.\"\n","categories":null},"excerpt":"When programmers discuss the relative merits of different programming\nlanguages, they often talk about them in prosaic terms as if they were…"}},{"node":{"id":"de1516f2-ccb9-579a-a2b1-e0e80bc54f98","fields":{"slug":"/blog/series/2bithistory/chaosnet/"},"frontmatter":{"title":"A Short History of Chaosnet","date":"30 September, 2018","desc":"Chaosnet is a long-extinct network protocol. But traces of it survive in the plumbing of the internet. Chaosnet was developed in the 1970s as a part of a larger effort to design and build a machine that could run the Lisp programming language more efficiently than a general-purpose computer.\n","categories":null},"excerpt":"If you fire up   and run a DNS query for  , you will get\na response somewhat like the following: The output contains both a section…"}}]},"js30":{"edges":[{"node":{"id":"b61f9005-fdc0-506e-a1fe-f62aa203eede","fields":{"slug":"/blog/series/js30/30-whack-a-mole/"},"frontmatter":{"title":"Whack a mole","desc":"This is the 30th project of Wes Bos's JS30 series. Today we'll build whack a mole game from scratch in vanilla JS!\n","date":"04 September, 2018","categories":null}}},{"node":{"id":"6d79079a-d68a-5fa5-bc04-eeaf31c63c51","fields":{"slug":"/blog/series/js30/29-countdown-timer/"},"frontmatter":{"title":"Countdown timer","desc":"This is the 29th project of Wes Bos's JS30 series. Today we'll build a custom JavaScript countdown timer from scratch.\n","date":"04 September, 2018","categories":null}}},{"node":{"id":"b5db28b7-f6ab-5064-9aad-fcdd4ea7db18","fields":{"slug":"/blog/series/js30/28-video-speed-ctrl/"},"frontmatter":{"title":"Video speed controller","desc":"This is the 28th project of Wes Bos's JS30 series. Today we'll build an experimental video speed controller UI.\n","date":"04 September, 2018","categories":null}}},{"node":{"id":"fe74e749-8321-5bae-9011-bf2a4e698afa","fields":{"slug":"/blog/series/js30/27-click-drag/"},"frontmatter":{"title":"Click and drag","desc":"This is the 27th project of Wes Bos's JS30 series. Today we make a pretty neat click and drag to scroll interface where you will learn a whole lot about JavaScript events!\n","date":"04 September, 2018","categories":null}}},{"node":{"id":"f84b370e-9db5-5a9f-a502-7e197593a533","fields":{"slug":"/blog/series/js30/26-stripe-nav/"},"frontmatter":{"title":"Stripe nav","desc":"This is the 26th project of Wes Bos's JS30 series. Today we'll re-creating the smooth Stripe dropdown follow-along navigation.\n","date":"04 September, 2018","categories":null}}},{"node":{"id":"6336d93b-2585-544f-92f1-42501c0b9359","fields":{"slug":"/blog/series/js30/25-js-events/"},"frontmatter":{"title":"JS Events","desc":"This is the 25th project of Wes Bos's JS30 series. In this exercise we'll play with JS events - bubbling, capture and one time events.\n","date":"04 September, 2018","categories":null}}}]},"twoBit":{"edges":[{"node":{"id":"101b7075-702b-5a26-9a71-c06cb08f0c68","fields":{"slug":"/blog/series/2bithistory/cat/"},"frontmatter":{"title":"The Source History of Cat","desc":"A tour of the many historical implementations of the Unix cat utility. Ken Thompson and Dennis Ritchie began writing Unix on a PDP 7. This was in 1969, before C, so all of the early Unix software was written in PDP 7 assembly. The first implementation of cat is thus in PDP 7 assembly. See how cat evolved from the 1960s PDP implementation to how it is today.\n","date":"12 November, 2018","categories":null}}},{"node":{"id":"b31740a7-1bc3-5483-bae7-ce9497f1bfdb","fields":{"slug":"/blog/series/2bithistory/lisp/"},"frontmatter":{"title":"How Lisp Became God's Own Programming Language","desc":"A look at the fascinating history behind the one programming language with magical powers. \"John McCarthy, Lisp's creator, did not originally intend for Lisp to be an elegant distillation of the principles of computation. But, after one or two fortunate insights and a series of refinements, that's what Lisp became.\"\n","date":"14 October, 2018","categories":null}}},{"node":{"id":"de1516f2-ccb9-579a-a2b1-e0e80bc54f98","fields":{"slug":"/blog/series/2bithistory/chaosnet/"},"frontmatter":{"title":"A Short History of Chaosnet","desc":"Chaosnet is a long-extinct network protocol. But traces of it survive in the plumbing of the internet. Chaosnet was developed in the 1970s as a part of a larger effort to design and build a machine that could run the Lisp programming language more efficiently than a general-purpose computer.\n","date":"30 September, 2018","categories":null}}},{"node":{"id":"23eef130-e214-53d2-9da8-931368239769","fields":{"slug":"/blog/series/2bithistory/the-rise-and-demise-of-rss/"},"frontmatter":{"title":"The Rise and Demise of RSS","desc":"There are two stories here. The first is a story about a vision of the web's future that never quite came to fruition. The second is a story about how a collaborative effort to improve a popular standard devolved into one of the most contentious forks in the history of open-source software development. An unabridged history of RSS' triumphs and failures.\n","date":"16 September, 2018","categories":null}}},{"node":{"id":"517a977f-9d7b-5827-844d-d89a87697fc5","fields":{"slug":"/blog/series/2bithistory/learning-basic/"},"frontmatter":{"title":"Learning BASIC Like It's 1983","desc":"Today, everyone knows how to use a computer, but very few people, even in the computing industry, grasp all of what is going on inside of any single machine. In 1983, though, home computers were unsophisticated enough that a diligent person could learn how a particular computer worked through and through. This post imagines a childhood encounter with BASIC on the Commodore 64.\n","date":"02 September, 2018","categories":null}}},{"node":{"id":"9b975b96-bdac-58ca-b120-92a649791a7e","fields":{"slug":"/blog/series/2bithistory/ada-lovelace-note-g/"},"frontmatter":{"title":"What Did Ada Lovelace's Program Actually Do?","desc":"In 1843, Ada Lovelace published the first nontrivial program. How did it work? While regarded as the first programmer, her program was never even run, because the computer she was targeting was never built. Modern computing as we know it hadn't even been invented yet!\n","date":"18 August, 2018","categories":null}}}]},"allCategories":{"group":[{"totalCount":2,"fieldValue":"frontend","edges":[{"node":{"id":"0464f247-23dc-5dcd-abf6-cc833ddd1ffe","fields":{"slug":"/blog/posts/inner-self/"},"frontmatter":{"title":"InnerSelf","date":"25 November, 2018","desc":"This is a source code walkthrough of InnerSelf - a tiny view + state management solution using innerHTML and ES6 template literals. InnerSelf to mimic a React+Redux solution in a minimal way, at just 600 bytes minified, ~350 bytes when gzipped.\n","categories":["frontend","software-architecture","javascript"]}}},{"node":{"id":"b38ef751-f232-523e-80e5-33a12f861253","fields":{"slug":"/blog/posts/bubbly-bg/"},"frontmatter":{"title":"Bubbly-bg","date":"24 November, 2018","desc":"This is a source code walkthrough of Bubbly-bg - a tiny dependency free library to get beautiful animated bubbly backgrounds for your webpages.\n","categories":["frontend","software-architecture","javascript"]}}}]},{"totalCount":1,"fieldValue":"fullstack","edges":[{"node":{"id":"ff65ddec-fd16-5bd0-b37a-b1de9a50c00f","fields":{"slug":"/blog/posts/test-post/"},"frontmatter":{"title":"WP history","date":"03 December, 2018","desc":"The history of wordpress\n","categories":["fullstack","software-architecture","history"]}}}]},{"totalCount":1,"fieldValue":"history","edges":[{"node":{"id":"ff65ddec-fd16-5bd0-b37a-b1de9a50c00f","fields":{"slug":"/blog/posts/test-post/"},"frontmatter":{"title":"WP history","date":"03 December, 2018","desc":"The history of wordpress\n","categories":["fullstack","software-architecture","history"]}}}]},{"totalCount":2,"fieldValue":"javascript","edges":[{"node":{"id":"0464f247-23dc-5dcd-abf6-cc833ddd1ffe","fields":{"slug":"/blog/posts/inner-self/"},"frontmatter":{"title":"InnerSelf","date":"25 November, 2018","desc":"This is a source code walkthrough of InnerSelf - a tiny view + state management solution using innerHTML and ES6 template literals. InnerSelf to mimic a React+Redux solution in a minimal way, at just 600 bytes minified, ~350 bytes when gzipped.\n","categories":["frontend","software-architecture","javascript"]}}},{"node":{"id":"b38ef751-f232-523e-80e5-33a12f861253","fields":{"slug":"/blog/posts/bubbly-bg/"},"frontmatter":{"title":"Bubbly-bg","date":"24 November, 2018","desc":"This is a source code walkthrough of Bubbly-bg - a tiny dependency free library to get beautiful animated bubbly backgrounds for your webpages.\n","categories":["frontend","software-architecture","javascript"]}}}]},{"totalCount":3,"fieldValue":"software-architecture","edges":[{"node":{"id":"ff65ddec-fd16-5bd0-b37a-b1de9a50c00f","fields":{"slug":"/blog/posts/test-post/"},"frontmatter":{"title":"WP history","date":"03 December, 2018","desc":"The history of wordpress\n","categories":["fullstack","software-architecture","history"]}}},{"node":{"id":"0464f247-23dc-5dcd-abf6-cc833ddd1ffe","fields":{"slug":"/blog/posts/inner-self/"},"frontmatter":{"title":"InnerSelf","date":"25 November, 2018","desc":"This is a source code walkthrough of InnerSelf - a tiny view + state management solution using innerHTML and ES6 template literals. InnerSelf to mimic a React+Redux solution in a minimal way, at just 600 bytes minified, ~350 bytes when gzipped.\n","categories":["frontend","software-architecture","javascript"]}}}]}]}},"pageContext":{}}