{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I once had a debate with members of my extended family about whether a computer\nscience degree is a degree worth pursuing. I was in college at the time and\ntrying to decide whether I should major in computer science. My aunt and a\ncousin of mine believed that I shouldn't. They conceded that knowing how to\nprogram is of course a useful and lucrative thing, but they argued that the\nfield of computer science advances so quickly that everything I learned would\nalmost immediately be outdated. Better to pick up programming on the side and\ninstead major in a field like economics or physics where the basic principles\nwould be applicable throughout my lifetime."}]},{"type":"text","value":"\n"},{"type":"comment","value":"more"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I knew that my aunt and cousin were wrong and decided to major in computer\nscience. (Sorry, aunt and cousin!) It is easy to see why the average person\nmight believe that a field like computer science, or a profession like software\nengineering, completely reinvents itself every few years. We had personal\ncomputers, then the web, then phones, then machine learning... technology is\nalways changing, so surely all the underlying principles and techniques change\ntoo. Of course, the amazing thing is how little actually changes. Most people,\nI'm sure, would be stunned to know just how old some of the important software\non their computer really is. I'm not talking about flashy application software,\nadmittedly—my copy of Firefox, the program I probably use the most on my\ncomputer, is not even two weeks old. But, if you pull up the manual page for\nsomething like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":", you will see that it has not been updated since 2010 (at\nleast on MacOS). And the original version of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" was written in 1974, which\nin the computing world was back when dinosaurs roamed Silicon Valley. People\n(and programs) still depend on "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" every day."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My aunt and cousin thought of computer technology as a series of increasingly\nelaborate sand castles supplanting one another after each high tide clears the\nbeach. The reality, at least in many areas, is that we steadily accumulate\nprograms that have solved problems. We might have to occasionally modify these\nprograms to avoid software rot, but otherwise they can be left alone. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" is\na simple program that solves a still-relevant problem, so it survives. Most\napplication programming is done at a very high level, atop a pyramid of much\nolder code solving much older problems. The ideas and concepts of 30 or 40\nyears ago, far from being obsolete today, have in many cases been embodied in\nsoftware that you can still find installed on your laptop."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I thought it would be interesting to take a look at one such old program and\nsee how much it had changed since it was first written. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" is maybe the\nsimplest of all the Unix utilities, so I'm going to use it as my example.\nKen Thompson wrote the original implementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" in 1969. If I were to\ntell somebody that I have a program on my computer from 1969, would that be\naccurate? How much has "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" really evolved over the decades? How old is the\nsoftware on our computers?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thanks to repositories like "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/dspinellis/unix-history-repo"},"children":[{"type":"text","value":"this\none"}]},{"type":"text","value":", we can see exactly how\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" has evolved since 1969. I'm going to focus on implementations of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":"\nthat are ancestors of the implementation I have on my Macbook. You will see, as\nwe trace "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" from the first versions of Unix down to the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" in MacOS\ntoday, that the program has been rewritten more times than you might expect—but\nit ultimately works more or less the same way it did fifty years ago."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Research Unix"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ken Thompson and Dennis Ritchie began writing Unix on a\nPDP 7. This was in 1969, before C, so all of the early Unix software was\nwritten in PDP 7 assembly. The exact flavor of assembly they used was unique to\nUnix, since Ken Thompson wrote his own assembler that added some features on\ntop of the assembler provided by DEC, the PDP 7's manufacturer. Thompson's\nchanges are all documented in "},{"type":"element","tagName":"a","properties":{"href":"https://www.bell-labs.com/usr/dmr/www/man11.pdf"},"children":[{"type":"text","value":"the original Unix Programmer's\nManual"}]},{"type":"text","value":" under the entry for\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"as"}]},{"type":"text","value":", the assembler."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/sinclairtarget/47143ba52b9d9e360d8db3762ee0cbf5#file-1-cat-pdp7-s"},"children":[{"type":"text","value":"The first\nimplementation"}]},{"type":"text","value":"\nof "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" is thus in PDP 7 assembly. I've added comments that try to\nexplain what each instruction is doing, but the program is still difficult to\nfollow unless you understand some of the extensions Thompson made while writing\nhis assembler. There are two important ones. First, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" character can be\nused to separate multiple statements on the same line. It appears that this was\nused most often to put system call arguments on the same line as the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sys"}]},{"type":"text","value":"\ninstruction. Second, Thompson added support for \"temporary labels\" using the\ndigits 0 through 9. These are labels that can be reused throughout a program,\nthus being, according to the Unix Programmer's Manual, \"less taxing both on the\nimagination of the programmer and on the symbol space of the assembler.\"\nFrom any given instruction, you can refer to the next or most recent temporary\nlabel "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"nf"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"nb"}]},{"type":"text","value":" respectively. For example, if you have some code\nin a block labeled "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"1:"}]},{"type":"text","value":", you can jump back to that block from further down by\nusing the instruction "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"jmp 1b"}]},{"type":"text","value":". (But you cannot jump "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"forward"}]},{"type":"text","value":" to that block\nfrom above without using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"jmp 1f"}]},{"type":"text","value":" instead.)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The most interesting thing about this first version of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" is that it\ncontains two names we should recognize. There is a block of instructions\nlabeled "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getc"}]},{"type":"text","value":" and a block of instructions labeled "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"putc"}]},{"type":"text","value":", demonstrating that\nthese names are older than the C standard library. The first version\nof "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" actually contained implementations of both functions. The\nimplementations buffered input so that reads and writes were not done a\ncharacter at a time."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first version of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" did not last long. Ken Thompson and Dennis Ritchie\nwere able to persuade Bell Labs to buy them a PDP 11 so that they could\ncontinue to expand and improve Unix. The PDP 11 had a different instruction\nset, so "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" had to be rewritten. I've marked up "},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/sinclairtarget/47143ba52b9d9e360d8db3762ee0cbf5#file-2-cat-pdp11-s"},"children":[{"type":"text","value":"this second\nversion"}]},{"type":"text","value":"\nof "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" with comments as well. It uses new assembler mnemonics for the new\ninstruction set and takes advantage of the PDP 11's various "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/PDP-11_architecture#Addressing_modes"},"children":[{"type":"text","value":"addressing\nmodes"}]},{"type":"text","value":". (If\nyou are confused by the parentheses and dollar signs in the source code, those\nare used to indicate different addressing modes.) But it also leverages the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\ncharacter and temporary labels just like the first version of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":", meaning\nthat these features must have been retained when "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"as"}]},{"type":"text","value":" was adapted for the\nPDP 11. "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The second version of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" is significantly simpler than the first. It is also\nmore \"Unix-y\" in that it doesn't just expect a list of filename arguments—it\nwill, when given no arguments, read from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"stdin"}]},{"type":"text","value":", which is what "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" still\ndoes today. You can also give this version of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" an argument of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" to\nindicate that it should read from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"stdin"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 1973, in preparation for the release of the Fourth Edition of Unix, much of\nUnix was rewritten in C. But "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" does not seem to have been rewritten in C\nuntil a while after that. "},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/sinclairtarget/47143ba52b9d9e360d8db3762ee0cbf5#file-3-cat-v7-c"},"children":[{"type":"text","value":"The first C\nimplementation"}]},{"type":"text","value":"\nof "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" only shows up in the Seventh Edition of Unix. This implementation is\nreally fun to look through because it is so simple. Of all the implementations\nto follow, this one most resembles the idealized "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" used as a pedagogic\ndemonstration in K&R C. The heart of the program is the classic two-liner:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"c"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-c"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-c"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"while"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"c "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getc"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"fi"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"!="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"EOF"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"putchar"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"c"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There is of course quite a bit more code than that, but the extra code is\nmostly there to ensure that you aren't reading and writing to the same file.\nThe other interesting thing to note is that this implementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" only\nrecognized one flag, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-u"}]},{"type":"text","value":". The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-u"}]},{"type":"text","value":" flag could be used to avoid buffering input\nand output, which "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" would otherwise do in blocks of 512 bytes."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"BSD"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After the Seventh Edition, Unix spawned all sorts of derivatives and offshoots.\nMacOS is built on top of Darwin, which in turn is derived from the Berkeley\nSoftware Distribution (BSD), so BSD is the Unix offshoot we are most interested\nin. BSD was originally just a collection of useful programs and add-ons for\nUnix, but it eventually became a complete operating system. BSD seems to have\nrelied on the original "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" implementation up until the fourth BSD release,\nknown as 4BSD, when support was added for a whole slew of new flags. "},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/sinclairtarget/47143ba52b9d9e360d8db3762ee0cbf5#file-4-cat-bsd4-c"},"children":[{"type":"text","value":"The 4BSD\nimplementation"}]},{"type":"text","value":"\nof "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" is clearly derived from the original implementation, though it\nadds a new function to implement the behavior triggered by the new flags. The\nnaming conventions already used in the file were adhered to—the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fflg"}]},{"type":"text","value":"\nvariable, used to mark whether input was being read from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"stdin"}]},{"type":"text","value":" or a file, was\njoined by "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"nflg"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bflg"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"vflg"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sflg"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"eflg"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"tflg"}]},{"type":"text","value":", all there to\nrecord whether or not each new flag was supplied in the invocation of the\nprogram. These were the last command-line flags added to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":"; the man page\nfor "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" today lists these flags and no others, at least on Mac OS. 4BSD was\nreleased in 1980, so this set of flags is 38 years old."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" would be entirely rewritten a final time for BSD Net/2, which was, among\nother things, an attempt to avoid licensing issues by replacing all AT&T\nUnix-derived code with new code. BSD Net/2 was released in 1991. This final\nrewrite of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" was done by Kevin Fall, who graduated from Berkeley in 1988\nand spent the next year working as a staff member at the Computer Systems\nResearch Group (CSRG). Fall told me that a list of Unix utilities still\nimplemented using AT&T code was put up on a wall at CSRG and staff were told to\npick the utilities they wanted to reimplement. Fall picked "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"mknod"}]},{"type":"text","value":".\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" implementation bundled with MacOS today is built from a source file\nthat still bears his name at the very top. His version of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":", even though it\nis a relatively trivial program, is today used by millions."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/sinclairtarget/47143ba52b9d9e360d8db3762ee0cbf5#file-5-cat-net2-c"},"children":[{"type":"text","value":"Fall's original\nimplementation"}]},{"type":"text","value":"\nof "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" is much longer than anything we have seen so far. Other than\nsupport for a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-?"}]},{"type":"text","value":" help flag, it adds nothing in the way of new functionality.\nConceptually, it is very similar to the 4BSD implementation. It is only\nlonger because Fall separates the implementation into a \"raw\" mode and a\n\"cooked\" mode. The \"raw\" mode is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" classic; it prints a file character for\ncharacter. The \"cooked\" mode is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" with all the 4BSD command-line options.\nThe distinction makes sense but it also pads out the implementation so that it\nseems more complex at first glance than it actually is. There is also a fancy\nerror handling function at the end of the file that further adds to its length."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"MacOS"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 2001, Apple launched Mac OS X. The launch was an important one for Apple,\nbecause Apple had spent many years trying and failing to replace its existing\noperating system (classic Mac OS), which had long been showing its age. There\nwere two previous attempts to create a new operating system internally, but\nboth went nowhere; in the end, Apple bought NeXT, Steve Jobs' company, which\nhad developed an operating system and object-oriented programming framework\ncalled NeXTSTEP. Apple took NeXTSTEP and used it as a basis for Mac OS X.\nNeXTSTEP was in part built on BSD, so using NeXTSTEP as a starting point for\nMac OS X brought BSD-derived code right into the center of the Apple universe."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The very first release of Mac OS X thus includes "},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/sinclairtarget/47143ba52b9d9e360d8db3762ee0cbf5#file-6-cat-macosx-c"},"children":[{"type":"text","value":"an\nimplementation"}]},{"type":"text","value":"\nof "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" pulled from the NetBSD project. NetBSD, which remains in development\ntoday, began as a fork of 386BSD, which in turn was based directly on BSD\nNet/2. So the first Mac OS X implementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"is"}]},{"type":"text","value":" Kevin Fall's "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":".\nThe only thing that had changed over the intervening decade was that Fall's\nerror-handling function "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"err()"}]},{"type":"text","value":" was removed and the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"err()"}]},{"type":"text","value":" function made\navailable by "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"err.h"}]},{"type":"text","value":" was used in its place. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"err.h"}]},{"type":"text","value":" is a BSD extension to the C\nstandard library."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The NetBSD implementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" was later swapped out for FreeBSD's\nimplementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":". "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Darwin_(operating_system)"},"children":[{"type":"text","value":"According to\nWikipedia"}]},{"type":"text","value":", Apple\nbegan using FreeBSD instead of NetBSD in Mac OS X 10.3 (Panther). But the Mac\nOS X implementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":", according to Apple's own open source releases,\nwas not replaced until Mac OS X 10.5 (Leopard) was released in 2007. The\n"},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/sinclairtarget/47143ba52b9d9e360d8db3762ee0cbf5#file-7-cat-macos-10-13-c"},"children":[{"type":"text","value":"FreeBSD\nimplementation"}]},{"type":"text","value":"\nthat Apple swapped in for the Leopard release is the same implementation on\nApple computers today. As of 2018, the implementation has not been\nupdated or changed at all since 2007."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So the Mac OS "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" is old. As it happens, it is actually two\nyears older than its 2007 appearance in MacOS X would suggest. "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/freebsd/freebsd/commit/a76898b84970888a6fd015e15721f65815ea119a#diff-6e405d5ab5b47ca2a131ac7955e5a16b"},"children":[{"type":"text","value":"This 2005\nchange"}]},{"type":"text","value":",\nwhich is visible in FreeBSD's Github mirror, was the last change made to\nFreeBSD's "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" before Apple pulled it into Mac OS X. So the Mac OS X "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":"\nimplementation, which has not been kept in sync with FreeBSD's "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":"\nimplementation, is officially 13 years old. There's a larger debate to be had\nabout how much software can change before it really counts as the same\nsoftware; in this case, the source file "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"has not changed at all"}]},{"type":"text","value":" since 2005."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" implementation used by Mac OS today is not that different from the\nimplementation that Fall wrote for the 1991 BSD Net/2 release. The biggest\ndifference is that a whole new function was added to provide Unix domain socket\nsupport. At some point, a FreeBSD developer also seems to have decided that\nFall's "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"raw_args()"}]},{"type":"text","value":" function and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cook_args()"}]},{"type":"text","value":" should be combined into a single\nfunction called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"scanfiles()"}]},{"type":"text","value":". Otherwise, the heart of the program is still\nFall's code."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I asked Fall how he felt about having written the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" implementation now used\nby millions of Apple users, either directly or indirectly through some program\nthat relies on "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" being present. Fall, who is now a consultant and a\nco-author of the most recent editions of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"TCP/IP Illustrated"}]},{"type":"text","value":", says that he is\nsurprised when people get such a thrill out of learning about his work on\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":". Fall has had a long career in computing and has worked on many\nhigh-profile projects, but it seems that many people still get most excited\nabout the six months of work he put into rewriting "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" in 1989."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"The Hundred-Year-Old Program"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the grand scheme of things, computers are not an old invention. We're used\nto hundred-year-old photographs or even hundred-year-old camera footage. But\ncomputer programs are in a different category—they're high-tech and new. At\nleast, they are now. As the computing industry matures, will we someday find\nourselves using programs that approach the hundred-year-old mark?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Computer hardware will presumably change enough that we won't be able to\ntake an executable compiled today and run it on hardware a century from now.\nPerhaps advances in programming language design will also mean that nobody will\nunderstand C in the future and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" will have long since been rewritten in\nanother language. (Though C has already been around for fifty years, and it\ndoesn't look like it is about to be replaced any time soon.) But barring all\nthat, why not just keep using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" we have forever?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I think the history of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" shows that some ideas in computer science are in\nfact very durable. Indeed, with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":", both the idea and the program itself are\nold. It may not be accurate to say that the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" on my computer is from 1969.\nBut I could make a case for saying that the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":" on my computer is from 1989,\nwhen Fall wrote his implementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"cat"}]},{"type":"text","value":". Lots of other software is just as\nancient. So maybe we shouldn't think of computer science and software\ndevelopment primarily as fields that disrupt the status quo and invent new\nthings. Our computer systems are built out of historical artifacts. At some\npoint, we may all spend more time trying to understand and maintain those\nhistorical artifacts than we spend writing new code."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{"style":"color:#5f5f5f;font-size:16px;font-style: italic;padding-top:2em;text-align:center"},"children":[{"type":"text","value":"\noriginally posted at "},{"type":"element","tagName":"a","properties":{"href":"https://twobithistory.org"},"children":[{"type":"text","value":"two bit history"}]},{"type":"text","value":" under \n"},{"type":"element","tagName":"a","properties":{"href":"https://creativecommons.org/licenses/by-sa/4.0/"},"children":[{"type":"text","value":"CC BY-SA 4.0"}]},{"type":"text","value":" by "},{"type":"element","tagName":"a","properties":{"href":"http://sinclairtarget.com"},"children":[{"type":"text","value":"Sinclair Target"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"title":"The Source History of Cat","author":{"name":"Sinclair Target"},"date":"12 November 2018"}}},"pageContext":{"slug":"/blog/series/2bithistory/cat/"}}