{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 1962, JFK challenged Americans to send a man to the moon by the end of the\ndecade, inspiring a heroic engineering effort that culminated in Neil\nArmstrong's first steps on the lunar surface. Many of the fruits of this\nengineering effort were highly visible and sexy—there were new spacecraft, new\nspacesuits, and moon buggies. But the Apollo Program was so staggeringly\ncomplex that new technologies had to be invented even to do the mundane things.\nOne of these technologies was IBM's Information Management System (IMS)."}]},{"type":"text","value":"\n"},{"type":"comment","value":"more"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"IMS is a database management system. NASA needed one in order to keep track of\nall the parts that went into building a Saturn V rocket, which—because there\nwere two million of them—was expected to be a challenge. Databases were a new\nidea in the 1960s and there weren't any already available for NASA to use, so,\nin 1965, NASA asked IBM to work with North American Aviation and Caterpillar\nTractor to create one. By 1968, IBM had installed a working version of IMS at\nNASA, though at the time it was called ICS/DL/I for \"Informational Control\nSystem and Data Language/Interface.\" (IBM seems to have gone through a brief,\nunfortunate infatuation with the slash; see\n"},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/PL/I"},"children":[{"type":"text","value":"PL/I"}]},{"type":"text","value":".) Two years later, IBM rebranded\nICS/DL/I as \"IMS\" and began selling it to other customers. It was one of the\nfirst commercially available database management systems."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The incredible thing about IMS is that it is still in use today. And not just\non a small scale: Banks, insurance companies, hospitals, and government\nagencies still use IMS for all sorts of critical tasks. Over 95% of Fortune\n1000 companies use IMS in some capacity, as do all of the top five US\nbanks."},{"type":"element","tagName":"sup","properties":{"id":"fnref-1"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-1","className":["footnote-ref"]},"children":[{"type":"text","value":"1"}]}]},{"type":"text","value":" Whenever you withdraw cash from an ATM, the odds are exceedingly\ngood that you are interacting with IMS at some point in the course of your\ntransaction. In a world where the relational database is an old workhorse\nincreasingly in competition with trendy new NoSQL databases, IMS is a freaking\ndinosaur. It is a relic from an era before the relational database was even\ninvented, which didn't happen until 1970. And yet it seems to be the database\nsystem in charge of all the important stuff."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I think this makes IMS pretty interesting. Depending on how you feel about\nrelational databases, it either offers insight into how the relational model\nimproved on its predecessors or else exemplifies an alternative model better\nsuited to certain problems."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"IMS works according to a hierarchical model, meaning that, instead of thinking\nabout data as tables that can be brought together using JOIN operations, IMS\nthinks about data as trees. Each kind of record you store can have other kinds\nof records as children; these child record types represent additional\ninformation that you might be interested in given a record of the parent type."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To take an example, say that you want to store information about bank\ncustomers. You might have one type of record to represent customers and another\ntype of record to represent accounts. Like in a relational database, where each\ntable has columns, these records will have different fields; we might want to\nhave a first name field, a last name field, and a city field for each customer.\nWe must then decide whether we are likely to first lookup a customer and then\ninformation about that customer's account, or whether we are likely to first\nlookup an account and then information about that account's owner. Assuming we\ndecide that we will access customers first, then we will make our account\nrecord type a child of our customer record type. Diagrammed, our database model\nwould look something like this:"},{"type":"element","tagName":"sup","properties":{"id":"fnref-2"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-2","className":["footnote-ref"]},"children":[{"type":"text","value":"2"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/2bithistory/hierarchical-model.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And an actual database might look like:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/2bithistory/hierarchical-db.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By modeling our data this way, we are hewing close to the reality of how our\ndata is stored. Each parent record includes pointers to its children, meaning\nthat moving down our tree from the root node is efficient. (Actually, each\nparent basically stores just one pointer to the first of its children. The\nchildren in turn contain pointers to their siblings. This ensures that the size\nof a record does not vary with the number of children it has.) This efficiency\ncan make data accesses very fast, provided that we are accessing our data in\nways that we anticipated when we first structured our database. According to\nIBM, an IMS instance can process over 100,000 transactions a second, which is\nprobably a large part of why IMS is still used, particularly at banks."},{"type":"element","tagName":"sup","properties":{"id":"fnref-3"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-3","className":["footnote-ref"]},"children":[{"type":"text","value":"3"}]}]},{"type":"text","value":" But\nthe downside is that we have lost a lot of flexibility. If we want to access\nour data in ways we did not anticipate, we will have a hard time."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To illustrate this, consider what might happen if we decide that we would like\nto access accounts before customers. Perhaps customers are calling in to update\ntheir addresses, and we would like them to uniquely identify themselves using\ntheir account numbers. So we want to use an account number to find an account,\nand then from there find the account's owner. But since all accesses start at\nthe root of our tree, there's no way for us to get to an account efficiently\nwithout first deciding on a customer. To fix this problem, we could introduce a\nsecond tree or hierarchy starting with account records; these account records\nwould then have customer records as children. This would let us access accounts\nand then customers efficiently. But it would involve duplicating information\nthat we already have stored in our database—we would have two trees storing the\nsame information in different orders. Another option would be to establish an\nindex of accounts that could point us to the right account record given an\naccount number. That would work too, but it would entail extra work during\ninsert and update operations in the future."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It was precisely this inflexibility and the problem of duplicated information\nthat pushed E. F. Codd to propose the relational model. In his 1970 paper, "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A\nRelational Model of Data for Large Shared Data Banks"}]},{"type":"text","value":", he states at the outset\nthat he intends to present a model for data storage that can protect users from\nhaving to know anything about how their data is stored. Looked at one way, the\nhierarchical model is entirely an artifact of how the designers of IMS chose to\nstore data. It is a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"bottom-up"}]},{"type":"text","value":" model, the implication of a physical reality.\nThe relational model, on the other hand, is an abstract model based on\nrelational algebra, and is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"top-down"}]},{"type":"text","value":" in that the data storage scheme can be\nanything provided it accommodates the model. The relational model's great\nadvantage is that, just because you've made decisions that have caused the\ndatabase to store your data in a particular way, you won't find yourself\neffectively unable to make certain queries."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All that said, the relational model is an abstraction, and we all know\nabstractions aren't free. Banks and large institutions have stuck with IMS\npartly because of the performance benefits, though it's hard to say if those\nbenefits would be enough to keep them from switching to a modern database if\nthey weren't also trying to avoid rewriting mission-critical legacy code.\nHowever, today's popular NoSQL databases demonstrate that there are people\nwilling to drop the conveniences of the relational model in return for better\nperformance. Something like MongoDB, which encourages its users to store data\nin a denormalized form, isn't all that different from IMS. If you choose to\nstore some entity inside of another JSON record, then in effect you have\ncreated something like the IMS hierarchy, and you have constrained your ability\nto query for that data in the future. But perhaps that's a tradeoff you're\nwilling to make. So, even if IMS hadn't predated E. F. Codd's relational model\nby several years, there are still reasons why IMS' creators might not have\nadopted the relational model wholesale."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Unfortunately, IMS isn't something that you can download and take for a spin on\nyour own computer. First of all, IMS is not free, so you would have to buy it\nfrom IBM. But the bigger problem is that IMS only runs on IBM mainframes like\nthe IBM z13. That's a shame, because it would be a joy to play around with IMS\nand get a sense for exactly how it differs from something like MySQL. But even\nwithout that opportunity, it's interesting to think about software systems that\nwork in ways we don't expect or aren't used to. And it's especially interesting\nwhen those systems, alien as they are, turn out to undergird your local\nhospital, the entire financial sector, and even the federal government."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{"style":"color:#5f5f5f;font-size:16px;font-style: italic;padding-top:2em;text-align:center"},"children":[{"type":"text","value":"\noriginally posted at "},{"type":"element","tagName":"a","properties":{"href":"https://twobithistory.org"},"children":[{"type":"text","value":"two bit history"}]},{"type":"text","value":" under \n"},{"type":"element","tagName":"a","properties":{"href":"https://creativecommons.org/licenses/by-sa/4.0/"},"children":[{"type":"text","value":"CC BY-SA 4.0"}]},{"type":"text","value":" by "},{"type":"element","tagName":"a","properties":{"href":"http://sinclairtarget.com"},"children":[{"type":"text","value":"Sinclair Target"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["footnotes"]},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-1"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://youtu.be/DhlpnSbSuJE?t=3m13s"},"children":[{"type":"text","value":"https://youtu.be/DhlpnSbSuJE?t=3m13s"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-1","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-2"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Klein, Barbara. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"An Introduction to IMS: Your Complete Guide to IBM Information Management System."}]},{"type":"text","value":" IBM Press, 2012."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-2","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-3"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.slideshare.net/roberthain/ims05-ims-100-k-benchmark"},"children":[{"type":"text","value":"https://www.slideshare.net/roberthain/ims05-ims-100-k-benchmark"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-3","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"title":"The Most Important Database You've Never Heard of","author":{"name":"Sinclair Target"},"date":"07 October 2017"}}},"pageContext":{"slug":"/blog/series/2bithistory/the-most-important-database/"}}