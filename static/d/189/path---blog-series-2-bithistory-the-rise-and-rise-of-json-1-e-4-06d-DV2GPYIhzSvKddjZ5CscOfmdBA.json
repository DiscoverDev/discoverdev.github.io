{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JSON has taken over the world. Today, when any two applications communicate\nwith each other across the internet, odds are they do so using JSON. It has\nbeen adopted by all the big players: Of the ten most popular web APIs, a list\nconsisting mostly of APIs offered by major companies like Google, Facebook, and\nTwitter, only one API exposes data in XML rather than JSON."},{"type":"element","tagName":"sup","properties":{"id":"fnref-1"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-1","className":["footnote-ref"]},"children":[{"type":"text","value":"1"}]}]},{"type":"text","value":" Twitter, to\ntake an illustrative example from that list, supported XML until 2013, when it\nreleased a new version of its API that dropped XML in favor of using JSON\nexclusively. JSON has also been widely adopted by the programming rank and\nfile: According to Stack Overflow, a question and answer site for programmers,\nmore questions are now asked about JSON than about any other data interchange\nformat."},{"type":"element","tagName":"sup","properties":{"id":"fnref-2"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-2","className":["footnote-ref"]},"children":[{"type":"text","value":"2"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/2bithistory/json.svg"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"XML still survives in many places. It is used across the web for SVGs and for\nRSS and Atom feeds. When Android developers want to declare that their app\nrequires a permission from the user, they do so in their app's manifest, which\nis written in XML. XML also isn't the only alternative to JSON—some people now\nuse technologies like YAML or Google's Protocol Buffers. But these are nowhere\nnear as popular as JSON. For the time being, JSON appears to be the go-to\nformat for communicating with other programs over the internet."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JSON's dominance is surprising when you consider that as recently as 2005 the\nweb world was salivating over the potential of \"Asynchronous JavaScript and\nXML\" and "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" \"Asynchronous JavaScript and JSON.\" It is of course possible\nthat this had nothing to do with the relative popularity of the two formats at\nthe time and reflects only that \"AJAX\" must have seemed a more appealing\nacronym than \"AJAJ.\" But even if some people were already using JSON instead of\nXML in 2005 (and in fact not many people were yet), one still wonders how XML's\nfortunes could have declined so precipitously that a mere decade or so later\n\"Asynchronous JavaScript and XML\" has become an ironic misnomer. What happened\nin that decade? How did JSON supersede XML in so many applications? And who\ncame up with this data format now depended on by engineers and systems all over\nthe world?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"The Birth of JSON"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first JSON message was sent in April of 2001. Since this was a historically\nsignificant moment in computing, the message was sent from a computer in a\nBay-Area garage. Douglas Crockford and Chip Morningstar, co-founders of a\ntechnology consulting company called State Software, had gathered in\nMorningstar's garage to test out an idea."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Crockford and Morningstar were trying to build AJAX applications well before\nthe term \"AJAX\" had been coined. Browser support for what they were attempting\nwas not good. They wanted to pass data to their application after the initial\npage load, but they had not found a way to do this that would work across all\nthe browsers they were targeting."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Though it's hard to believe today, Internet Explorer represented the bleeding\nedge of web browsing in 2001. As early as 1999, Internet Explorer 5 supported a\nprimordial form of XMLHttpRequest, which programmers could access using a\nframework called ActiveX. Crockford and Morningstar could have used this\ntechnology to fetch data for their application, but they could not have used\nthe same solution in Netscape 4, another browser that they sought to support.\nSo Crockford and Morningstar had to use a different system that worked in both\nbrowsers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first JSON message looked like this:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"<html><head><script>\n    document.domain = 'fudco';\n    parent.session.receive(\n        { to: \"session\", do: \"test\",\n          text: \"Hello world\" }\n    )\n</script></head></html>"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Only a small part of the message resembles JSON as we know it today. The\nmessage itself is actually an HTML document containing some JavaScript. The\npart that resembles JSON is just a JavaScript object literal being passed to a\nfunction called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"receive()"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Crockford and Morningstar had decided that they could abuse an HTML frame to\nsend themselves data. They could point a frame at a URL that would return an\nHTML document like the one above.  When the HTML was received, the JavaScript\nwould be run, passing the object literal back to the application. This worked\nas long as you were careful to sidestep browser protections preventing a\nsub-window from accessing its parent; you can see that Crockford and\nMornginstar did that by explicitly setting the document domain. (This\nframe-based technique, sometimes called the hidden frame technique, was\ncommonly used in the late 90s before the widespread implementation of\nXMLHttpRequest."},{"type":"element","tagName":"sup","properties":{"id":"fnref-3"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-3","className":["footnote-ref"]},"children":[{"type":"text","value":"3"}]}]},{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The amazing thing about the first JSON message is that it's not obviously the\nfirst usage of a new kind of data format at all. It's just JavaScript!  In fact\nthe idea of using JavaScript this way is so straightforward that Crockford\nhimself has said that he wasn't the first person to do it—he claims that\nsomebody at Netscape was using JavaScript array literals to communicate\ninformation as early as 1996."},{"type":"element","tagName":"sup","properties":{"id":"fnref-4"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-4","className":["footnote-ref"]},"children":[{"type":"text","value":"4"}]}]},{"type":"text","value":" Since the message is just JavaScript, it\ndoesn't require any kind of special parsing. The JavaScript interpreter can do\nit all."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first ever JSON message actually ran afoul of the JavaScript interpreter.\nJavaScript reserves an enormous number of words—there are 64 reserved words as\nof ECMAScript 6—and Crockford and Morningstar had unwittingly used one in their\nmessage. They had used "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"do"}]},{"type":"text","value":" as a key, but "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"do"}]},{"type":"text","value":" is reserved. Since JavaScript\nhas so many reserved words, Crockford decided that, rather than avoid using all\nthose reserved words, he would just mandate that all JSON keys be quoted. A\nquoted key would be treated as a string by the JavaScript interpreter, meaning\nthat reserved words could be used safely. This is why JSON keys are quoted to\nthis day."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Crockford and Morningstar realized they had something that could be used in all\nsorts of applications. They wanted to name their format \"JSML\", for JavaScript\nMarkup Language, but found that the acronym was already being used for\nsomething called Java Speech Markup Language. So they decided to go with\n\"JavaScript Object Notation\", or JSON. They began pitching it to clients but\nsoon found that clients were unwilling to take a chance on an unknown\ntechnology that lacked an official specification.  So Crockford decided he\nwould write one."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 2002, Crockford bought the domain "},{"type":"element","tagName":"a","properties":{"href":"http://JSON.org"},"children":[{"type":"text","value":"JSON.org"}]},{"type":"text","value":" and put up the\nJSON grammar and an example implementation of a parser. The website is still\nup, though it now includes a prominent link to the JSON ECMA standard ratified\nin 2013. After putting up the website, Crockford did little more to promote\nJSON, but soon found that lots of people were submitting JSON parser\nimplementations in all sorts of different programming languages. JSON's lineage\nclearly tied it to JavaScript, but it became apparent that JSON was well-suited\nto data interchange between arbitrary pairs of languages."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Doing AJAX Wrong"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JSON got a big boost in 2005.  That year, a web designer and developer named\nJesse James Garrett coined the term \"AJAX\" in a blog post.  He was careful to\nstress that AJAX wasn't any one new technology, but rather \"several\ntechnologies, each flourishing in its own right, coming together in powerful\nnew ways.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-5"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-5","className":["footnote-ref"]},"children":[{"type":"text","value":"5"}]}]},{"type":"text","value":" AJAX was the name that Garrett was giving to a new approach to\nweb application development that he had noticed gaining favor.  His blog post\nwent on to describe how developers could leverage JavaScript and XMLHttpRequest\nto build new kinds of applications that were more responsive and stateful than\nthe typical web page. He pointed to Gmail and Flickr as examples of websites\nalready relying on AJAX techniques."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The \"X\" in \"AJAX\" stood for XML, of course. But in a follow-up Q&A post,\nGarrett pointed to JSON as an entirely acceptable alternative to XML. He wrote\nthat \"XML is the most fully-developed means of getting data in and out of an\nAJAX client, but there's no reason you couldn't accomplish the same effects\nusing a technology like JavaScript Object Notation or any similar means of\nstructuring data.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-6"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-6","className":["footnote-ref"]},"children":[{"type":"text","value":"6"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Developers indeed found that they could easily use JSON to build AJAX\napplications and many came to prefer it to XML. And so, ironically, the\ninterest in AJAX led to an explosion in JSON's popularity. It was around this\ntime that JSON drew the attention of the blogosphere."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 2006, Dave Winer, a prolific blogger and the engineer behind a number of\nXML-based technologies such as RSS and XML-RPC, complained that JSON was\nreinventing XML for no good reason.  Though one might think that a contest\nbetween data interchange formats would be unlikely to engender death threats,\nWiner wrote:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"No doubt I can write a routine to parse [JSON], but look at how deep they\nwent to re-invent, XML itself wasn't good enough for them, for some reason\n(I'd love to hear the reason). Who did this travesty? Let's find a tree and\nstring them up. Now."},{"type":"element","tagName":"sup","properties":{"id":"fnref-7"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-7","className":["footnote-ref"]},"children":[{"type":"text","value":"7"}]}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's easy to understand Winer's frustration. XML has never been widely loved.\nEven Winer has said that he does not love XML."},{"type":"element","tagName":"sup","properties":{"id":"fnref-8"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-8","className":["footnote-ref"]},"children":[{"type":"text","value":"8"}]}]},{"type":"text","value":" But XML was designed to be a\nsystem that could be used by everyone for almost anything imaginable. To that\nend, XML is actually a meta-language that allows you to define domain-specific\nlanguages for individual applications—RSS, the web feed technology, and SOAP\n(Simple Object Access Protocol) are examples. Winer felt that it was important\nto work toward consensus because of all the benefits a common interchange\nformat could bring. He felt that XML's flexibility should be able to\naccommodate everybody's needs. And yet here was JSON, a format offering no\nbenefits over XML except those enabled by throwing out the cruft that made XML\nso flexible."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Crockford saw Winer's blog post and left a comment on it. In response to the\ncharge that JSON was reinventing XML, Crockford wrote, \"The good thing about\nreinventing the wheel is that you can get a round one.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-9"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-9","className":["footnote-ref"]},"children":[{"type":"text","value":"9"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"JSON vs XML"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By 2014, JSON had been officially specified by both an ECMA standard and an\nRFC. It had its own MIME type. JSON had made it to the big leagues."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Why did JSON become so much more popular than XML?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"On "},{"type":"element","tagName":"a","properties":{"href":"http://JSON.org"},"children":[{"type":"text","value":"JSON.org"}]},{"type":"text","value":", Crockford summarizes some of JSON's advantages\nover XML. He writes that JSON is easier for both humans and machines to\nunderstand, since its syntax is minimal and its structure is predictable."},{"type":"element","tagName":"sup","properties":{"id":"fnref-10"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-10","className":["footnote-ref"]},"children":[{"type":"text","value":"10"}]}]},{"type":"text","value":"\nOther bloggers have focused on XML's verbosity and \"the angle bracket\ntax.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-11"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-11","className":["footnote-ref"]},"children":[{"type":"text","value":"11"}]}]},{"type":"text","value":" Each opening tag in XML must be matched with a closing tag, meaning\nthat an XML document contains a lot of redundant information. This can make an\nXML document much larger than an equivalent JSON document when uncompressed,\nbut, perhaps more importantly, it also makes an XML document harder to read."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Crockford has also claimed that another enormous advantage for JSON is that\nJSON was designed as a data interchange format."},{"type":"element","tagName":"sup","properties":{"id":"fnref-12"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-12","className":["footnote-ref"]},"children":[{"type":"text","value":"12"}]}]},{"type":"text","value":" It was meant to carry\nstructured information between programs from the very beginning. XML, though it\nhas been used for the same purpose, was originally designed as a document\nmarkup language. It evolved from SGML (Standard Generalized Markup Language),\nwhich in turn evolved from a markup language called Scribe, intended as a word\nprocessing system similar to LaTeX. In XML, a tag can contain what is called\n\"mixed content,\" or text with inline tags surrounding words or phrases. This\nrecalls the image of an editor marking up a manuscript with a red or blue pen,\nwhich is arguably the central metaphor of a markup language. JSON, on the other\nhand, does not support a clear analogue to mixed content, but that means that\nits structure can be simpler.  A document is best modeled as a tree, but by\nthrowing out the document idea Crockford could limit JSON to dictionaries and\narrays, the basic and familiar elements all programmers use to build their\nprograms."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Finally, my own hunch is that people disliked XML because it was confusing, and\nit was confusing because it seemed to come in so many different flavors. At\nfirst blush, it's not obvious where the line is between XML proper and its\nsub-languages like RSS, ATOM, SOAP, or SVG. The first lines of a typical XML\ndocument establish the XML version and then the particular sub-language the XML\ndocument should conform to.  That is a lot of variation to account for already,\nespecially when compared to JSON, which is so straightforward that no new\nversion of the JSON specification is ever expected to be written. The designers\nof XML, in their attempt to make XML the one data interchange format to rule\nthem all, fell victim to that classic programmer's pitfall: over-engineering.\nXML was so generalized that it was hard to use for something simple."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 2000, a campaign was launched to get HTML to conform to the XML standard. A\nspecification was published for XML-compliant HTML, thereafter known as XHTML.\nSome browser vendors immediately started supporting the new standard, but it\nquickly became obvious that the vast HTML-producing public were unwilling to\nrevise their habits. The new standard called for stricter validation of XHTML\nthan had been the norm for HTML, but too many websites depended on HTML's\nforgiving rules. By 2009, an attempt to write a second version of the XHTML\nstandard was aborted when it became clear that the future of HTML was going to\nbe HTML5, a standard that did not insist on XML compliance."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the XHTML effort had succeeded, then maybe XML would have become the common\ndata format that its designers hoped it would be. Imagine a world in which HTML\ndocuments and API responses had the exact same structure. In such a world, JSON\nmight not have become as ubiquitous as it is today. But I read the failure of\nXHTML as a kind of moral defeat for the XML camp. If XML wasn't the best tool\nfor HTML, then maybe there were better tools out there for other applications\nalso. In that world, our world, it is easy to see how a format as simple and\nnarrowly tailored as JSON could find great success."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{"style":"color:#5f5f5f;font-size:16px;font-style: italic;padding-top:2em;text-align:center"},"children":[{"type":"text","value":"\noriginally posted at "},{"type":"element","tagName":"a","properties":{"href":"https://twobithistory.org"},"children":[{"type":"text","value":"two bit history"}]},{"type":"text","value":" under \n"},{"type":"element","tagName":"a","properties":{"href":"https://creativecommons.org/licenses/by-sa/4.0/"},"children":[{"type":"text","value":"CC BY-SA 4.0"}]},{"type":"text","value":" by "},{"type":"element","tagName":"a","properties":{"href":"http://sinclairtarget.com"},"children":[{"type":"text","value":"Sinclair Target"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["footnotes"]},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-1"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://www.cs.tufts.edu/comp/150IDS/final_papers/tstras01.1/FinalReport/FinalReport.html#software"},"children":[{"type":"text","value":"http://www.cs.tufts.edu/comp/150IDS/final_papers/tstras01.1/FinalReport/FinalReport.html#software"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-1","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-2"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://insights.stackoverflow.com/trends?tags=json%2Cxml%2Cprotocol-buffers%2Cyaml%2Ccsv"},"children":[{"type":"text","value":"https://insights.stackoverflow.com/trends?tags=json%2Cxml%2Cprotocol-buffers%2Cyaml%2Ccsv"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-2","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-3"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Zakas, Nicholas C., et al. “What Is Ajax?” Professional Ajax, 2nd ed., Wiley, 2007."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-3","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-4"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://youtu.be/-C-JoyNuQJs?t=32s"},"children":[{"type":"text","value":"https://youtu.be/-C-JoyNuQJs?t=32s"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-4","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-5"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://adaptivepath.org/ideas/ajax-new-approach-web-applications/"},"children":[{"type":"text","value":"http://adaptivepath.org/ideas/ajax-new-approach-web-applications/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-5","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-6"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ibid."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-6","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-7"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://scripting.com/2006/12/20.html"},"children":[{"type":"text","value":"http://scripting.com/2006/12/20.html"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-7","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-8"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://blogoscoped.com/archive/2009-03-05-n15.html"},"children":[{"type":"text","value":"http://blogoscoped.com/archive/2009-03-05-n15.html"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-8","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-9"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://scripting.wordpress.com/2006/12/20/scripting-news-for-12202006/#comment-26383"},"children":[{"type":"text","value":"https://scripting.wordpress.com/2006/12/20/scripting-news-for-12202006/#comment-26383"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-9","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-10"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://www.json.org/xml.html"},"children":[{"type":"text","value":"http://www.json.org/xml.html"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-10","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-11"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://blog.codinghorror.com/xml-the-angle-bracket-tax"},"children":[{"type":"text","value":"https://blog.codinghorror.com/xml-the-angle-bracket-tax"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-11","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-12"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://youtu.be/-C-JoyNuQJs?t=33m50sgg"},"children":[{"type":"text","value":"https://youtu.be/-C-JoyNuQJs?t=33m50sgg"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-12","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"title":"The Rise and Rise of JSON","author":{"name":"Sinclair Target"},"date":"21 September 2017"}}},"pageContext":{"slug":"/blog/series/2bithistory/the-rise-and-rise-of-json/"}}