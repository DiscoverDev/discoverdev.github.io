{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When programmers discuss the relative merits of different programming\nlanguages, they often talk about them in prosaic terms as if they were so many\ntools in a tool belt—one might be more appropriate for systems programming,\nanother might be more appropriate for gluing together other programs to\naccomplish some ad hoc task. This is as it should be. Languages have different\nstrengths and claiming that a language is better than other languages without\nreference to a specific use case only invites an unproductive and vitriolic\ndebate. "}]},{"type":"text","value":"\n"},{"type":"comment","value":"more"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But there is one language that seems to inspire a peculiar universal reverence:\nLisp. Keyboard crusaders that would otherwise pounce on anyone daring to\nsuggest that some language is better than any other will concede that Lisp is\non another level. Lisp transcends the utilitarian criteria used to judge other\nlanguages, because the median programmer has never used Lisp to build anything\npractical and probably never will, yet the reverence for Lisp runs so deep that\nLisp is often ascribed mystical properties. Everyone's favorite webcomic,\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"xkcd"}]},{"type":"text","value":", has depicted Lisp this way at least twice: In "},{"type":"element","tagName":"a","properties":{"href":"https://xkcd.com/224/"},"children":[{"type":"text","value":"one\ncomic"}]},{"type":"text","value":", a character reaches some sort of Lisp\nenlightenment, which appears to allow him to comprehend the fundamental\nstructure of the universe. In "},{"type":"element","tagName":"a","properties":{"href":"https://xkcd.com/297/"},"children":[{"type":"text","value":"another comic"}]},{"type":"text","value":", a robed,\nsenescent programmer hands a stack of parentheses to his padawan, saying that\nthe parentheses are \"elegant weapons for a more civilized age,\" suggesting that\nLisp has all the occult power of the Force."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another great example is Bob Kanefsky's parody of a\nsong called \"God Lives on Terra.\" His parody, written in the mid-1990s and\ncalled \"Eternal Flame\", describes how God must have created the world using\nLisp. The following is an excerpt, but the full set of lyrics can be found in\nthe "},{"type":"element","tagName":"a","properties":{"href":"https://www.gnu.org/fun/jokes/eternal-flame.en.html"},"children":[{"type":"text","value":"GNU Humor\nCollection"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"For God wrote in Lisp code"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nWhen he filled the leaves with green."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nThe fractal flowers and recursive roots:"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nThe most lovely hack I've seen."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nAnd when I ponder snowflakes,"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nnever finding two the same,"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nI know God likes a language"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nwith its own four-letter name."}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I can only speak for myself, I suppose, but I think this \"Lisp Is Arcane Magic\"\ncultural meme is the most bizarre and fascinating thing ever. Lisp was\nconcocted in the ivory tower as a tool for artificial intelligence research, so\nit was always going to be unfamiliar and maybe even a bit mysterious to the\nprogramming laity. But programmers now "},{"type":"element","tagName":"a","properties":{"href":"https://www.reddit.com/r/ProgrammerHumor/comments/5c14o6/xkcd_lisp/d9szjnc/"},"children":[{"type":"text","value":"urge each other to \"try Lisp before you\ndie\""}]},{"type":"text","value":"\nas if it were some kind of mind-expanding psychedelic. They do this even though\nLisp is now the second-oldest programming language in widespread use, younger\nonly than Fortran, and even then by just one year."},{"type":"element","tagName":"sup","properties":{"id":"fnref-1"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-1","className":["footnote-ref"]},"children":[{"type":"text","value":"1"}]}]},{"type":"text","value":" Imagine if your job were\nto promote some new programming language on behalf of the organization or team\nthat created it. Wouldn't it be great if you could convince everyone that your\nnew language had divine powers? But how would you even do that? How does a\nprogramming language come to be known as a font of hidden knowledge? "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How did Lisp get to be this way?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/2bithistory/byte_lisp.jpg","alt":"Byte Magazine Cover, August, 1979."},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The cover of Byte Magazine, August, 1979."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Theory A: The Axiomatic Language"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"John McCarthy, Lisp's creator, did not originally intend for Lisp to be an\nelegant distillation of the principles of computation. But, after one or two\nfortunate insights and a series of refinements, that's what Lisp became. Paul\nGraham—we will talk about him some more later—has written that, with Lisp,\nMcCarthy \"did for programming something like what Euclid did for geometry.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-2"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-2","className":["footnote-ref"]},"children":[{"type":"text","value":"2"}]}]},{"type":"text","value":"\nPeople might see a deeper meaning in Lisp because McCarthy built Lisp out of\nparts so fundamental that it is hard to say whether he invented it or\ndiscovered it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"McCarthy began thinking about creating a language during the 1956 Darthmouth\nSummer Research Project on Artificial Intelligence. The Summer Research Project\nwas in effect an ongoing, multi-week academic conference, the very first in the\nfield of artificial intelligence. McCarthy, then an assistant professor of\nMathematics at Dartmouth, had actually coined the term \"artificial\nintelligence\" when he proposed the event."},{"type":"element","tagName":"sup","properties":{"id":"fnref-3"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-3","className":["footnote-ref"]},"children":[{"type":"text","value":"3"}]}]},{"type":"text","value":" About ten or so people attended\nthe conference for its entire duration."},{"type":"element","tagName":"sup","properties":{"id":"fnref-4"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-4","className":["footnote-ref"]},"children":[{"type":"text","value":"4"}]}]},{"type":"text","value":" Among them were Allen Newell and\nHerbert Simon, two researchers affiliated with the RAND Corporation and\nCarnegie Mellon that had just designed a language called IPL."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Newell and Simon had been trying to build a system capable of generating proofs\nin propositional calculus. They realized that it would be hard to do this while\nworking at the level of the computer's native instruction set, so they decided\nto create a language—or, as they called it, a \"pseudo-code\"—that would help\nthem more naturally express the workings of their \"Logic Theory Machine.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-5"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-5","className":["footnote-ref"]},"children":[{"type":"text","value":"5"}]}]},{"type":"text","value":"\nTheir language, called IPL for \"Information Processing Language\", was more of a\nhigh-level assembly dialect then a programming language in the sense we mean\ntoday. Newell and Simon, perhaps referring to Fortran, noted that other\n\"pseudo-codes\" then in development were \"preoccupied\" with representing\nequations in standard mathematical notation."},{"type":"element","tagName":"sup","properties":{"id":"fnref-6"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-6","className":["footnote-ref"]},"children":[{"type":"text","value":"6"}]}]},{"type":"text","value":" Their language focused instead\non representing sentences in propositional calculus as lists of symbolic\nexpressions. Programs in IPL would basically leverage a series of\nassembly-language macros to manipulate and evaluate expressions within one or\nmore of these lists."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"McCarthy thought that having algebraic expressions in a language,\nFortran-style, would be useful. So he didn't like IPL very much."},{"type":"element","tagName":"sup","properties":{"id":"fnref-7"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-7","className":["footnote-ref"]},"children":[{"type":"text","value":"7"}]}]},{"type":"text","value":" But he\nthought that symbolic lists were a good way to model problems in artificial\nintelligence, particularly problems involving deduction. This was the germ of\nMcCarthy's desire to create an algebraic list processing language, a language\nthat would resemble Fortran but also be able to process symbolic lists like\nIPL."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Of course, Lisp today does not resemble Fortran. Over the next few years,\nMcCarthy's ideas about what an ideal list processing language should look like\nevolved. His ideas began to change in 1957, when he started writing routines\nfor a chess-playing program in Fortran. The prolonged exposure to Fortran\nconvinced McCarthy that there were several infelicities in its design, chief\namong them the awkward "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"IF"}]},{"type":"text","value":" statement."},{"type":"element","tagName":"sup","properties":{"id":"fnref-8"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-8","className":["footnote-ref"]},"children":[{"type":"text","value":"8"}]}]},{"type":"text","value":" McCarthy invented an alternative,\nthe \"true\" conditional expression, which returns sub-expression A if the\nsupplied test succeeds and sub-expression B if the supplied test fails and\nwhich "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"also"}]},{"type":"text","value":" only evaluates the sub-expression that actually gets returned.\nDuring the summer of 1958, when McCarthy worked to design a program that could\nperform differentiation, he realized that his \"true\" conditional expression\nmade writing recursive functions easier and more natural."},{"type":"element","tagName":"sup","properties":{"id":"fnref-9"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-9","className":["footnote-ref"]},"children":[{"type":"text","value":"9"}]}]},{"type":"text","value":" The\ndifferentiation problem also prompted McCarthy to devise the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"maplist"}]},{"type":"text","value":"\nfunction, which takes another function as an argument and applies it to all the\nelements in a list."},{"type":"element","tagName":"sup","properties":{"id":"fnref-10"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-10","className":["footnote-ref"]},"children":[{"type":"text","value":"10"}]}]},{"type":"text","value":" This was useful for differentiating sums of\narbitrarily many terms."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"None of these things could be expressed in Fortran, so, in the fall of 1958,\nMcCarthy set some students to work implementing Lisp. Since McCarthy was now an\nassistant professor at MIT, these were all MIT students. As McCarthy and his\nstudents translated his ideas into running code, they made changes that further\nsimplified the language. The biggest change involved Lisp's syntax. McCarthy\nhad originally intended for the language to include something called\n\"M-expressions,\" which would be a layer of syntactic sugar that made Lisp's\nsyntax resemble Fortran's. Though M-expressions could be translated to\nS-expressions—the basic lists enclosed by parentheses that Lisp is known for—\nS-expressions were really a low-level representation meant for the machine. The\nonly problem was that McCarthy had been denoting M-expressions using square\nbrackets, and the IBM 026 keypunch that McCarthy's team used at MIT did not\nhave any square bracket keys on its keyboard."},{"type":"element","tagName":"sup","properties":{"id":"fnref-11"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-11","className":["footnote-ref"]},"children":[{"type":"text","value":"11"}]}]},{"type":"text","value":" So the Lisp team stuck with\nS-expressions, using them to represent not just lists of data but function\napplications too. McCarthy and his students also made a few other\nsimplifications, including a switch to prefix notation and a memory model\nchange that meant the language only had one real type."},{"type":"element","tagName":"sup","properties":{"id":"fnref-12"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-12","className":["footnote-ref"]},"children":[{"type":"text","value":"12"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 1960, McCarthy published his famous paper on Lisp called \"Recursive\nFunctions of Symbolic Expressions and Their Computation by Machine.\" By that\ntime, the language had been pared down to such a degree that McCarthy realized\nhe had the makings of \"an elegant mathematical system\" and not just another\nprogramming language."},{"type":"element","tagName":"sup","properties":{"id":"fnref-13"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-13","className":["footnote-ref"]},"children":[{"type":"text","value":"13"}]}]},{"type":"text","value":" He later wrote that the many simplifications that\nhad been made to Lisp turned it \"into a way of describing computable functions\nmuch neater than the Turing machines or the general recursive definitions used\nin recursive function theory.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-14"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-14","className":["footnote-ref"]},"children":[{"type":"text","value":"14"}]}]},{"type":"text","value":" In his paper, he therefore presented Lisp\nboth as a working programming language and as a formalism for studying the\nbehavior of recursive functions. "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"McCarthy explained Lisp to his readers by building it up out of only a very\nsmall collection of rules. Paul Graham later retraced McCarthy's steps, using\nmore readable language, in his essay "},{"type":"element","tagName":"a","properties":{"href":"http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf"},"children":[{"type":"text","value":"\"The Roots of\nLisp\""}]},{"type":"text","value":". Graham is able to\nexplain Lisp using only seven primitive operators, two different notations for\nfunctions, and a half-dozen higher-level functions defined in terms of the\nprimitive operators. That Lisp can be specified by such a small sequence of\nbasic rules no doubt contributes to its mystique. Graham has called McCarthy's\npaper an attempt to \"axiomatize computation.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-15"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-15","className":["footnote-ref"]},"children":[{"type":"text","value":"15"}]}]},{"type":"text","value":" I think that is a great way\nto think about Lisp's appeal. Whereas other languages have clearly artificial\nconstructs denoted by reserved words like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"while"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"typedef"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public\nstatic void"}]},{"type":"text","value":", Lisp's design almost seems entailed by the very logic of\ncomputing. This quality and Lisp's original connection to a field as esoteric\nas \"recursive function theory\" should make it no surprise that Lisp has so much\nprestige today."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Theory B: Machine of the Future"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two decades after its creation, Lisp had become, according to the famous\n"},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Jargon_File"},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Hacker's Dictionary"}]}]},{"type":"text","value":", the \"mother\ntongue\" of artificial intelligence research. Early on, Lisp spread quickly,\nprobably because its regular syntax made implementing it on new machines\nrelatively straightforward. Later, researchers would keep using it because of\nhow well it handled symbolic expressions, important in an era when so much of\nartificial intelligence was symbolic. Lisp was used in seminal artificial\nintelligence projects like the "},{"type":"element","tagName":"a","properties":{"href":"https://hci.stanford.edu/winograd/shrdlu/"},"children":[{"type":"text","value":"SHRDLU natural language\nprogram"}]},{"type":"text","value":", the "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Macsyma"},"children":[{"type":"text","value":"Macsyma algebra\nsystem"}]},{"type":"text","value":", and the "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/ACL2"},"children":[{"type":"text","value":"ACL2 logic\nsystem"}]},{"type":"text","value":". "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By the mid-1970s, though, artificial intelligence researchers were running out\nof computer power. The PDP-10, in particular—everyone's favorite machine for\nartificial intelligence work—had an 18-bit address space that increasingly was\ninsufficient for Lisp AI programs."},{"type":"element","tagName":"sup","properties":{"id":"fnref-16"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-16","className":["footnote-ref"]},"children":[{"type":"text","value":"16"}]}]},{"type":"text","value":" Many AI programs were also supposed to\nbe interactive, and making a demanding interactive program perform well on a\ntime-sharing system was challenging. The solution, originally proposed by Peter\nDeutsch at MIT, was to engineer a computer specifically designed to run Lisp\nprograms. These Lisp machines, as I described in "},{"type":"element","tagName":"a","properties":{"href":"/blog/series/2bithistory/chaosnet"},"children":[{"type":"text","value":"my last post on Chaosnet"}]},{"type":"text","value":", would give each user a dedicated\nprocessor optimized for Lisp. They would also eventually come with development\nenvironments written entirely in Lisp for hardcore Lisp programmers. Lisp\nmachines, devised in an awkward moment at the tail of the minicomputer era but\nbefore the full flowering of the microcomputer revolution, were\nhigh-performance personal computers for the programming elite."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For a while, it seemed as if Lisp machines would be the wave of the future.\nSeveral companies sprang into existence and raced to commercialize the\ntechnology. The most successful of these companies was called Symbolics,\nfounded by veterans of the MIT AI Lab. Throughout the 1980s, Symbolics produced\na line of computers known as the 3600 series, which were popular in the AI\nfield and in industries requiring high-powered computing. The 3600 series\ncomputers featured large screens, bit-mapped graphics, a mouse interface, and\n"},{"type":"element","tagName":"a","properties":{"href":"https://youtu.be/gV5obrYaogU?t=201"},"children":[{"type":"text","value":"powerful graphics and animation software"}]},{"type":"text","value":".\nThese were impressive machines that enabled impressive programs. For example,\nBob Culley, who worked in robotics research and contacted me via Twitter, was\nable to implement and visualize a path-finding algorithm on a Symbolics 3650\nin 1985. He explained to me that bit-mapped graphics and object-oriented\nprogramming (available on Lisp machines via "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Flavors_(programming_language)"},"children":[{"type":"text","value":"the Flavors\nextension"}]},{"type":"text","value":") were\nvery new in the 1980s. Symbolics was the cutting edge."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/2bithistory/symbolics.jpg","alt":"Bob Culley's path-finding program."},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Bob Culley's path-finding program."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a result, Symbolics machines were outrageously expensive. The Symbolics 3600\ncost $110,000 in 1983."},{"type":"element","tagName":"sup","properties":{"id":"fnref-16"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-16","className":["footnote-ref"]},"children":[{"type":"text","value":"16"}]}]},{"type":"text","value":" So most people could only marvel at the power of\nLisp machines and the wizardry of their Lisp-writing operators from afar. But\nmarvel they did. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Byte Magazine"}]},{"type":"text","value":" featured Lisp and Lisp machines several times\nfrom 1979 through to the end of the 1980s. In the August, 1979 issue, a special\non Lisp, the magazine's editor raved about the new machines being developed at\nMIT with \"gobs of memory\" and \"an advanced operating system.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-17"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-17","className":["footnote-ref"]},"children":[{"type":"text","value":"17"}]}]},{"type":"text","value":" He thought\nthey sounded so promising that they would make the two prior years—which saw\nthe launch of the Apple II, the Commodore PET, and the TRS-80—look boring by\ncomparison. A half decade later, in 1985, a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Byte Magazine"}]},{"type":"text","value":" contributor\ndescribed writing Lisp programs for the \"sophisticated, superpowerful Symbolics\n3670\" and urged his audience to learn Lisp, claiming it was both \"the language\nof choice for most people working in AI\" and soon to be a general-purpose\nprogramming language as well."},{"type":"element","tagName":"sup","properties":{"id":"fnref-18"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-18","className":["footnote-ref"]},"children":[{"type":"text","value":"18"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I asked Paul McJones, who has done lots of Lisp "},{"type":"element","tagName":"a","properties":{"href":"http://www.softwarepreservation.org/projects/LISP/"},"children":[{"type":"text","value":"preservation\nwork"}]},{"type":"text","value":" for the Computer\nHistory Museum in Mountain View, about when people first began talking about\nLisp as if it were a gift from higher-dimensional beings. He said that the\ninherent properties of the language no doubt had a lot to do with it, but he\nalso said that the close association between Lisp and the powerful artificial\nintelligence applications of the 1960s and 1970s probably contributed too. When\nLisp machines became available for purchase in the 1980s, a few more people\noutside of places like MIT and Stanford were exposed to Lisp's power and the\nlegend grew. Today, Lisp machines and Symbolics are little remembered, but they\nhelped keep the mystique of Lisp alive through to the late 1980s."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Theory C: Learn to Program"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In 1985, MIT professors Harold Abelson and Gerald Sussman, along with Sussman's\nwife, Julie Sussman, published a textbook called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Structure and Interpretation\nof Computer Programs"}]},{"type":"text","value":". The textbook introduced readers to programming using the\nlanguage Scheme, a dialect of Lisp. It was used to teach MIT's introductory\nprogramming class for two decades. My hunch is that SICP (as the title is\ncommonly abbreviated) about doubled Lisp's \"mystique factor.\" SICP took Lisp\nand showed how it could be used to illustrate deep, almost philosophical\nconcepts in the art of computer programming. Those concepts were general enough\nthat any language could have been used, but SICP's authors chose Lisp. As a\nresult, Lisp's reputation was augmented by the notoriety of this bizarre and\nbrilliant book, which has intrigued generations of programmers (and also become\n"},{"type":"element","tagName":"a","properties":{"href":"https://knowyourmeme.com/forums/meme-research/topics/47038-structure-and-interpretation-of-computer-programs-hugeass-image-dump-for-evidence"},"children":[{"type":"text","value":"a very strange\nmeme"}]},{"type":"text","value":").\nLisp had always been \"McCarthy's elegant formalism\"; now it was also \"that\nlanguage that teaches you the hidden secrets of programming.\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's worth dwelling for a while on how weird SICP really is, because I think\nthe book's weirdness and Lisp's weirdness get conflated today. The weirdness\nstarts with the book's cover. It depicts a wizard or alchemist approaching a\ntable, prepared to perform some sort of sorcery. In one hand he holds a set of\ncalipers or a compass, in the other he holds a globe inscribed with the words\n\"eval\" and \"apply.\" A woman opposite him gestures at the table; in the\nbackground, the Greek letter lambda floats in mid-air, radiating light."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/2bithistory/sicp.jpg","alt":"The cover art for SICP."},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The cover art for SICP."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Honestly, what is going on here? Why does the table have animal feet? Why is\nthe woman gesturing at the table? What is the significance of the inkwell? Are\nwe supposed to conclude that the wizard has unlocked the hidden mysteries of\nthe universe, and that those mysteries consist of the \"eval/apply\" loop and\nthe Lambda Calculus? It would seem so. This image alone must have done an\nenormous amount to shape how people talk about Lisp today."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But the text of the book itself is often just as weird. SICP is unlike most\nother computer science textbooks that you have ever read. Its authors explain\nin the foreword to the book that the book is not merely about how to program in\nLisp—it is instead about \"three foci of phenomena: the human mind, collections\nof computer programs, and the computer.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-19"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-19","className":["footnote-ref"]},"children":[{"type":"text","value":"19"}]}]},{"type":"text","value":" Later, they elaborate, describing\ntheir conviction that programming shouldn't be considered a discipline of\ncomputer science but instead should be considered a new notation for \"procedural\nepistemology.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-20"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-20","className":["footnote-ref"]},"children":[{"type":"text","value":"20"}]}]},{"type":"text","value":" Programs are a new way of structuring thought that only\nincidentally get fed into computers. The first chapter of the book gives a\nbrief tour of Lisp, but most of the book after that point is about much more\nabstract concepts. There is a discussion of different programming paradigms, a\ndiscussion of the nature of \"time\" and \"identity\" in object-oriented systems,\nand at one point a discussion of how synchronization problems may arise because\nof fundamental constraints on communication that play a role akin to the fixed\nspeed of light in the theory of relativity."},{"type":"element","tagName":"sup","properties":{"id":"fnref-21"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-21","className":["footnote-ref"]},"children":[{"type":"text","value":"21"}]}]},{"type":"text","value":" It's heady stuff."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All this isn't to say that the book is bad. It's a wonderful book. It discusses\nimportant programming concepts at a higher level than anything else I have\nread, concepts that I had long wondered about but didn't quite have the\nlanguage to describe. It's impressive that an introductory programming textbook\ncan move so quickly to describing the fundamental shortfalls of object-oriented\nprogramming and the benefits of functional languages that minimize mutable\nstate. It's mind-blowing that this then turns into a discussion of how a stream\nparadigm, perhaps something like today's\n"},{"type":"element","tagName":"a","properties":{"href":"https://rxjs-dev.firebaseapp.com/"},"children":[{"type":"text","value":"RxJS"}]},{"type":"text","value":", can give you the best of both\nworlds. SICP distills the essence of high-level program design in a way\nreminiscent of McCarthy's original Lisp paper. The first thing you want to do\nafter reading it is get your programmer friends to read it; if they look it\nup, see the cover, but then don't read it, all they take away is that some\nmysterious, fundamental \"eval/apply\" thing gives magicians special powers over\ntables with animal feet. I would be deeply impressed in their shoes too."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But maybe SICP's most important contribution was to elevate Lisp from\ncurious oddity to pedagogical must-have. Well before SICP, people told each\nother to learn Lisp as a way of getting better at programming. The 1979 Lisp\nissue of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Byte Magazine"}]},{"type":"text","value":" is testament to that fact. The same editor that raved\nabout MIT's new Lisp machines also explained that the language was worth\nlearning because it \"represents a different point of view from which to analyze\nproblems.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-22"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-22","className":["footnote-ref"]},"children":[{"type":"text","value":"22"}]}]},{"type":"text","value":" But SICP presented Lisp as more than just a foil for other\nlanguages; SICP used Lisp as an "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"introductory"}]},{"type":"text","value":" language, implicitly making the\nargument that Lisp is the best language in which to grasp the fundamentals of\ncomputer programming. When programmers today tell each other to try Lisp before\nthey die, they arguably do so in large part because of SICP. After all, the\nlanguage "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Brainfuck"},"children":[{"type":"text","value":"Brainfuck"}]},{"type":"text","value":" presumably offers\n\"a different point of view from which to analyze problems.\" But people learn\nLisp instead because they know that, for twenty years or so, the Lisp point of\nview was thought to be so useful that MIT taught Lisp to undergraduates before\nanything else."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Lisp Comes Back"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The same year that SICP was released, Bjarne Stroustrup published the first\nedition of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The C++ Programming Language"}]},{"type":"text","value":", which brought object-oriented\nprogramming to the masses. A few years later, the market for Lisp machines\ncollapsed and the AI winter began. For the next decade and change, C++ and then\nJava would be the languages of the future and Lisp would be left out in the\ncold."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is of course impossible to pinpoint when people started getting excited\nabout Lisp again. But that may have happened after Paul Graham, Y-Combinator\nco-founder and Hacker News creator, published a series of influential essays\npushing Lisp as the best language for startups. In his essay "},{"type":"element","tagName":"a","properties":{"href":"http://www.paulgraham.com/avg.html"},"children":[{"type":"text","value":"\"Beating the\nAverages,\""}]},{"type":"text","value":" for example, Graham argued that\nLisp macros simply made Lisp more powerful than other languages. He claimed\nthat using Lisp at his own startup, Viaweb, helped him develop features faster\nthan his competitors were able to. "},{"type":"element","tagName":"a","properties":{"href":"https://web.archive.org/web/20061004035628/http://wiki.alu.org/Chris-Perkins"},"children":[{"type":"text","value":"Some programmers at\nleast"}]},{"type":"text","value":"\nwere persuaded. But the vast majority of programmers did not switch to Lisp."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What happened instead is that more and more Lisp-y features have been\nincorporated into everyone's favorite programming languages. Python got list\ncomprehensions. C# got Linq. Ruby got... well, Ruby "},{"type":"element","tagName":"a","properties":{"href":"http://www.randomhacks.net/2005/12/03/why-ruby-is-an-acceptable-lisp/"},"children":[{"type":"text","value":"is a\nLisp"}]},{"type":"text","value":".\nAs Graham noted even back in 2001, \"the default language, embodied in a\nsuccession of popular languages, has gradually evolved toward Lisp.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-23"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-23","className":["footnote-ref"]},"children":[{"type":"text","value":"23"}]}]},{"type":"text","value":"\nThough other languages are gradually becoming like Lisp, Lisp itself somehow\nmanages to retain its special reputation as that mysterious language that few\npeople understand but everybody should learn. In 1980, on the occasion of\nLisp's 20th anniversary, McCarthy wrote that Lisp had survived as long as it\nhad because it occupied \"some kind of approximate local optimum in the space of\nprogramming languages.\""},{"type":"element","tagName":"sup","properties":{"id":"fnref-24"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-24","className":["footnote-ref"]},"children":[{"type":"text","value":"24"}]}]},{"type":"text","value":" That understates Lisp's real influence. Lisp\nhasn't survived for over half a century because programmers have begrudgingly\nconceded that it is the best tool for the job decade after decade; in fact, it\nhas survived even though most programmers do not use it at all. Thanks to its\norigins and use in artificial intelligence research and perhaps also the legacy\nof SICP, Lisp continues to fascinate people. Until we can imagine God creating\nthe world with some newer language, Lisp isn't going anywhere."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{"style":"color:#5f5f5f;font-size:16px;font-style: italic;padding-top:2em;text-align:center"},"children":[{"type":"text","value":"\noriginally posted at "},{"type":"element","tagName":"a","properties":{"href":"https://twobithistory.org"},"children":[{"type":"text","value":"two bit history"}]},{"type":"text","value":" under \n"},{"type":"element","tagName":"a","properties":{"href":"https://creativecommons.org/licenses/by-sa/4.0/"},"children":[{"type":"text","value":"CC BY-SA 4.0"}]},{"type":"text","value":" by "},{"type":"element","tagName":"a","properties":{"href":"http://sinclairtarget.com"},"children":[{"type":"text","value":"Sinclair Target"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["footnotes"]},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-1"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"John McCarthy, \"History of Lisp\", 14, Stanford University, February 12, 1979, accessed October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"http://jmc.stanford.edu/articles/lisp/lisp.pdf"},"children":[{"type":"text","value":"http://jmc.stanford.edu/articles/lisp/lisp.pdf"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-1","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-2"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Paul Graham, \"The Roots of Lisp\", 1, January 18, 2002, accessed October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf"},"children":[{"type":"text","value":"http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-2","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-3"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Martin Childs, \"John McCarthy: Computer scientist known as the father of AI\", The Independent, November 1, 2011, accessed on October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"https://www.independent.co.uk/news/obituaries/john-mccarthy-computer-scientist-known-as-the-father-of-ai-6255307.html"},"children":[{"type":"text","value":"https://www.independent.co.uk/news/obituaries/john-mccarthy-computer-scientist-known-as-the-father-of-ai-6255307.html"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-3","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-4"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lisp Bulletin History. "},{"type":"element","tagName":"a","properties":{"href":"http://www.artinfo-musinfo.org/scans/lb/lb3f.pdf"},"children":[{"type":"text","value":"http://www.artinfo-musinfo.org/scans/lb/lb3f.pdf"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-4","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-5"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Allen Newell and Herbert Simon, \"Current Developments in Complex Information Processing,\" 19, May 1, 1956, accessed on October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"http://bitsavers.org/pdf/rand/ipl/P-850_Current_Developments_In_Complex_Information_Processing_May56.pdf"},"children":[{"type":"text","value":"http://bitsavers.org/pdf/rand/ipl/P-850_Current_Developments_In_Complex_Information_Processing_May56.pdf"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-5","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-6"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ibid."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-6","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-7"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Herbert Stoyan, \"Lisp History\", 43, Lisp Bulletin #3, December 1979, accessed on October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"http://www.artinfo-musinfo.org/scans/lb/lb3f.pdf"},"children":[{"type":"text","value":"http://www.artinfo-musinfo.org/scans/lb/lb3f.pdf"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-7","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-8"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"McCarthy, \"History of Lisp\", 5."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-8","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-9"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ibid."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-9","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-10"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"McCarthy \"History of Lisp\", 6."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-10","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-11"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Stoyan, \"Lisp History\", 45"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-11","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-12"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"McCarthy, \"History of Lisp\", 8."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-12","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-13"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"McCarthy, \"History of Lisp\", 2."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-13","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-14"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"McCarthy, \"History of Lisp\", 8."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-14","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-15"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graham, \"The Roots of Lisp\", 11."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-15","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-16"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Guy Steele and Richard Gabriel, \"The Evolution of Lisp\", 22, History of Programming Languages 2, 1993, accessed on October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"http://www.dreamsongs.com/Files/HOPL2-Uncut.pdf"},"children":[{"type":"text","value":"http://www.dreamsongs.com/Files/HOPL2-Uncut.pdf"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-16","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-17"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Carl Helmers, \"Editorial\", Byte Magazine, 154, August 1979, accessed on October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/byte-magazine-1979-08/page/n153"},"children":[{"type":"text","value":"https://archive.org/details/byte-magazine-1979-08/page/n153"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-17","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-18"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Patrick Winston, \"The Lisp Revolution\", 209, April 1985, accessed on October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/byte-magazine-1985-04/page/n207"},"children":[{"type":"text","value":"https://archive.org/details/byte-magazine-1985-04/page/n207"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-18","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-19"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Harold Abelson, Gerald Jay. Sussman, and Julie Sussman, Structure and Interpretation of Computer Programs (Cambridge, Mass: MIT Press, 2010), xiii."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-19","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-20"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abelson, xxiii."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-20","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-21"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abelson, 428."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-21","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-22"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Helmers, 7."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-22","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-23"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Paul Graham, \"What Made Lisp Different\", December 2001, accessed on October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"http://www.paulgraham.com/diff.html"},"children":[{"type":"text","value":"http://www.paulgraham.com/diff.html"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-23","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-24"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"John McCarthy, \"Lisp—Notes on its past and future\", 3, Stanford University, 1980, accessed on October 14, 2018, "},{"type":"element","tagName":"a","properties":{"href":"http://jmc.stanford.edu/articles/lisp20th/lisp20th.pdf"},"children":[{"type":"text","value":"http://jmc.stanford.edu/articles/lisp20th/lisp20th.pdf"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"#fnref-24","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"title":"How Lisp Became God's Own Programming Language","author":{"name":"Sinclair Target"},"date":"14 October 2018"}}},"pageContext":{"slug":"/blog/series/2bithistory/lisp/"}}