{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"6261782e-017a-595e-bc12-36c4e0e08e37","fields":{"slug":"/blog/posts/scaling-backend-100x/"},"frontmatter":{"title":"Scaling our backend 100x","date":"08 December, 2018","desc":"The egineering team at clarisights talks about the strategies and techniques applied for scaling their backend 100X. From indexing and reducing DB ops to memoization and caching - a complete breakdown of the problem and the steps taken to reach the solution.\n"},"excerpt":"Introduction The post will show how we scaled a lot of our time consuming background jobs 100X and more. Obviously, 100X is relative to…"}},{"node":{"id":"6d2e9b11-b441-5c99-a883-16182f9e6658","fields":{"slug":"/blog/posts/ruby-hotspots-memoization-caching/"},"frontmatter":{"title":"Ruby Hotspots: Finding avenues for Memoization and Caching","date":"05 December, 2018","desc":"The egineering team at clarisights describe how they found and eliminated hotspots in their Ruby on Rails code using caching and memoization. A Key challenge faced was the identification  of the hotspots in code where the benefits for caching would be maximized.\n"},"excerpt":"Like most fast growing startups building the next generation technical platform, we, at Clarisights engineering, are always trying to…"}},{"node":{"id":"0464f247-23dc-5dcd-abf6-cc833ddd1ffe","fields":{"slug":"/blog/posts/inner-self/"},"frontmatter":{"title":"InnerSelf","date":"25 November, 2018","desc":"This is a source code walkthrough of InnerSelf - a tiny view + state management solution using innerHTML and ES6 template literals. InnerSelf to mimic a React+Redux solution in a minimal way, at just 600 bytes minified, ~350 bytes when gzipped.\n"},"excerpt":"InnerSelf is a tiny view + state management solution using innerHTML. Aims to mimic a React+Redux solution in a minimal way, at just 60…"}}]}},"pageContext":{"limit":3,"skip":0,"blogPath":"/Users/deepakkarki/Desktop/discover-dev/gatsby-site/src/pages/blog//","category":"software-architecture","totalPages":2}}