{"version":3,"sources":["webpack:///./src/pages/blog/series/index.js","webpack:///./src/pages/blog/index.module.css","webpack:///./src/components/post-grid/post-grid.js","webpack:///./src/components/post-grid/post-grid.module.css","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es7.object.entries.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_object-to-array.js"],"names":["__webpack_exports__","_ref","data","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_6__","Object","entries","js30","twoBit","map","_ref2","series","_ref2$","name","url","nodes","edges","edge","node","_components_post_grid_post_grid__WEBPACK_IMPORTED_MODULE_8__","posts","className","styles","seeMore","gatsby__WEBPACK_IMPORTED_MODULE_5__","to","seriesIndexFragment","js30Fragment","twoBitFragment","categoryListQuery","module","exports","nav","navItem","navSep","intro","description","newsletter","title","subTitle","PostGrid","react__WEBPACK_IMPORTED_MODULE_1___default","postGrid","i","_post_card_post_card__WEBPACK_IMPORTED_MODULE_3__","key","post","postGridItem","$export","__webpack_require__","$entries","S","it","getKeys","toIObject","isEnum","f","isEntries","O","keys","length","result","call","push"],"mappings":"sXAiBeA,EAAA,iBAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAMhB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAEEE,OAAOC,QAVK,CAElBC,KAAS,CAAC,QAAS,QACnBC,OAAW,CAAC,kBAAmB,iBAOKC,IAAI,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAA,GAAAE,EAAAF,EAAA,GAAdG,EAAcD,EAAA,GAARE,EAAQF,EAAA,GACrDG,EAAQf,EAAKW,GAAQK,MAAMP,IAAK,SAAAQ,GAAI,OAAIA,EAAKC,OACjD,OACAjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKU,GACLZ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUC,MAAOL,IACjBd,EAAAC,EAAAC,cAAA,MAAIkB,UAAWC,IAAOC,SACpBtB,EAAAC,EAAAC,cAACqB,EAAA,KAAD,CAAMC,GAAE,gBAAkBX,GAA1B,wCAcT,IAAMY,EAAmB,YAqBnBC,EAAY,aAcZC,EAAc,aAcdC,EAAiB,kCCjG9BC,EAAAC,QAAA,CAAkBC,IAAA,2BAAAC,QAAA,+BAAAC,OAAA,8BAAAC,MAAA,6BAAAC,YAAA,mCAAAC,WAAA,kCAAAC,MAAA,6BAAAC,SAAA,gCAAAhB,QAAA,uHCeHiB,IAVE,SAAAzC,GAAA,IAAEqB,EAAFrB,EAAEqB,MAAF,OACfqB,EAAAvC,EAAAC,cAAA,OAAKkB,UAAWC,IAAOoB,UAEnBtB,EAAMX,IAAK,SAACS,EAAMyB,GAAP,OACTF,EAAAvC,EAAAC,cAACyC,EAAA,EAAD,CAAUC,IAAKF,EAAGG,KAAM5B,EAAMG,UAAWC,IAAOyB,wCCTxDjB,EAAAC,QAAA,CAAkBW,SAAA,oCAAAK,aAAA,8DCAlB,IAAAC,EAAcC,EAAQ,GACtBC,EAAeD,EAAQ,IAARA,EAA4B,GAE3CD,IAAAG,EAAA,UACA7C,QAAA,SAAA8C,GACA,OAAAF,EAAAE,2BCNA,IAAAC,EAAcJ,EAAQ,IACtBK,EAAgBL,EAAQ,IACxBM,EAAaN,EAAQ,IAAeO,EACpC1B,EAAAC,QAAA,SAAA0B,GACA,gBAAAL,GAOA,IANA,IAKAP,EALAa,EAAAJ,EAAAF,GACAO,EAAAN,EAAAK,GACAE,EAAAD,EAAAC,OACAjB,EAAA,EACAkB,EAAA,GAEAD,EAAAjB,GAAAY,EAAAO,KAAAJ,EAAAb,EAAAc,EAAAhB,OACAkB,EAAAE,KAAAN,EAAA,CAAAZ,EAAAa,EAAAb,IAAAa,EAAAb,IACK,OAAAgB","file":"component---src-pages-blog-series-index-js-e5362e69940577776bc0.js","sourcesContent":["/*\nmaybe make this an index.md\nAdd the necessary stuff in the frontmatter\n  like which series would you like to feature and stuff.\nand then have a function in gatsby-node.js which will read the markdown and\ndo the query. Result is then passed to the template as pageContext\n*/\n\n// or never mind, just call it out manually(?)\n//  but for this I have to change the jsx & graphql every time I add a series.\n\nimport React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../../../components/layout\"\nimport styles from \"../index.module.css\"\nimport PostGrid from \"../../../components/post-grid/post-grid\"\n\nexport default ({ data }) => {\n  let seriesNameMap = {\n    // fragmentName : [name, url]\n    \"js30\" : [\"JS 30\", \"js30\"], \n    \"twoBit\" : [\"Two Bit History\", \"2bithistory\"]\n  }\n  return (\n    <Layout>\n      <div>\n        <h1>Series</h1>\n        {\n          Object.entries(seriesNameMap).map(([series, [name, url]])=>{\n            let nodes = data[series].edges.map( edge => edge.node )\n            return (\n            <div>\n              <h2>{name}</h2>\n              <PostGrid posts={nodes}/>\n              <h3 className={styles.seeMore}>\n                <Link to={`/blog/series/${url}`}>See all posts in the series &rarr;</Link>\n              </h3>\n            </div>\n            )\n          })\n        }\n      </div>\n    </Layout>\n  )\n}\n\n// Actually I don't think any of this is required.\n// Just get it in gatsby-node.js and give it here via pageContext\n// this will remain more or less constant.\nexport const seriesIndexFragment = graphql`\n  fragment seriesIndex on MarkdownRemarkConnection {\n    edges{\n      node{\n        id\n        fields{\n          slug\n        }\n        frontmatter {\n          title\n          date(formatString: \"DD MMMM, YYYY\")\n          desc\n        }\n      }\n    }\n  }\n`\n\n// this is specific to each series mainly because\n//  of \"name aliasing\" and \"fileAbsolutePath\"\n// just change that from query to query\nexport const js30Fragment = graphql`\n  fragment js30 on Query {\n    js30: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: {regex: \"/src/pages/blog/series/js30//\"}\n        frontmatter:{published: {eq : true}, type: {ne: \"page\"}}\n      }\n      sort: { fields: [frontmatter___part], order: DESC }, limit: 6\n      ){\n        ...seriesIndex\n      }\n  }\n`\n\nexport const twoBitFragment = graphql`\n  fragment twoBit on Query {\n    twoBit: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: {regex: \"/src/pages/blog/series/2bithistory//\"}\n        frontmatter:{published: {eq : true}, type: {ne: \"page\"}}\n      }\n      sort: { fields: [frontmatter___date], order: DESC }, limit: 6\n      ){\n        ...seriesIndex\n      }\n  }\n`\n\nexport const categoryListQuery = graphql`\nquery {\n  ...js30\n  ...twoBit\n}\n`","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"index-module--nav--3m9rb\",\"navItem\":\"index-module--navItem--35Psk\",\"navSep\":\"index-module--navSep--2B2P6\",\"intro\":\"index-module--intro--1t1bb\",\"description\":\"index-module--description--3mcQt\",\"newsletter\":\"index-module--newsletter--1dFde\",\"title\":\"index-module--title--3EWYl\",\"subTitle\":\"index-module--subTitle--1GLJJ\",\"seeMore\":\"index-module--seeMore--CgiQA\"};","import React from 'react'\nimport styles from './post-grid.module.css'\nimport PostCard from \"../post-card/post-card\"\n\n// postNodes originates thru a graphQL query\n// postNodes = data.allPosts.edges.map( edge => edge.node )\nconst PostGrid = ({posts}) => (\n  <div className={styles.postGrid}>\n    {\n      posts.map( (node, i) => (\n        <PostCard key={i} post={node} className={styles.postGridItem}/>\n      ))\n    }\n  </div>\n)\n\nexport default PostGrid\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postGrid\":\"post-grid-module--postGrid--1M7dK\",\"postGridItem\":\"post-grid-module--postGridItem--3PTLy\"};","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","var getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n"],"sourceRoot":""}